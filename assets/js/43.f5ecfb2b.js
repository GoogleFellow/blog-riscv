(window.webpackJsonp=window.webpackJsonp||[]).push([[43],{228:function(t,s,a){"use strict";a.r(s);var n=a(4),e=Object(n.a)({},function(){var t=this,s=t.$createElement,a=t._self._c||s;return a("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[a("p",[t._v("title: LwIP Introduction---Based on ESP32\ntags:")]),t._v(" "),a("ul",[a("li",[t._v("LwIP\ncategories:")]),t._v(" "),a("li",[t._v("Geek Hobbies\nauthor: suda-morris\ndate: 2018-07-30 13:20:23")])]),t._v(" "),a("hr"),t._v(" "),a("h2",{attrs:{id:"tcp-ip协议栈"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-ip协议栈","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP/IP协议栈")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/02/P0JwdJ.png",alt:"TCP/IP协议栈"}})]),t._v(" "),a("h2",{attrs:{id:"lwip架构"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lwip架构","aria-hidden":"true"}},[t._v("#")]),t._v(" LwIP架构")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/09/PyrZkR.png",alt:"LwIP架构"}})]),t._v(" "),a("h2",{attrs:{id:"进程模型"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#进程模型","aria-hidden":"true"}},[t._v("#")]),t._v(" 进程模型")]),t._v(" "),a("blockquote",[a("p",[t._v("进程模型是指TCP/IP协议栈的各协议入IP协议、TCP协议、ICMP协议等是如何实现的。")])]),t._v(" "),a("ul",[a("li",[t._v("TCP/IP协议栈的每个协议都通过一个不同的进程实现。在该模型下，每个进程都严格地与一个协议相对应。这种进程模型的优点是网络协议的每一层都很清晰，每一层都可以随时参与系统运行。该模型的缺点是进程间的上下文切换比较频繁，系统将为频繁的上下文切换付出较大的代价。")]),t._v(" "),a("li",[t._v("TCP/IP协议栈驻留在操作系统的内核中，应用程序通过系统调用与TCP/IP协议栈通信。该模型下，各协议栈并非严格地与一个进程相对应。")]),t._v(" "),a("li",[t._v("TCP/IP协议栈驻留在同一个进程中，独立于操作系统内核空间。LwIP采用正是这种方式，LwIP作为一个独立的进程，运行在用户空间内，其优点是可以方便地移植到不同的操作系统中运行。")])]),t._v(" "),a("h2",{attrs:{id:"内存管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#内存管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 内存管理")]),t._v(" "),a("blockquote",[a("p",[t._v("LwIP的动态内存管理机制大致上可以分成三种：标准C运行库自带的内存分配策略、LwIP的动态内存堆分配策略、LwIP的动态内存池分配策略。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/01/PwhSgK.png",alt:"LwIP内存管理"}})]),t._v(" "),a("ul",[a("li",[t._v("将MEM_LIBC_MALLOC设置为1，表明使用标准C库自带的内存分配策略")]),t._v(" "),a("li",[t._v("将MEMP_MEM_MALLOC设置为1，表明使用LwIP自己的动态内存堆分配策略")]),t._v(" "),a("li",[t._v("LwIP还支持内存池，不过在ESP-IDF中并没有被使能。相较于内存堆的动态分配，内存池效率更高，碎片少，但是会消耗更多的内存")])]),t._v(" "),a("h2",{attrs:{id:"缓冲管理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#缓冲管理","aria-hidden":"true"}},[t._v("#")]),t._v(" 缓冲管理")]),t._v(" "),a("blockquote",[a("p",[t._v("LwIP的缓冲管理机制的功能是尽量避免内存拷贝，尽量较少对内存和空间的需求，提高程序的执行效率。LwIP使用数据结构pbuf来描述内存的缓冲数据包。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/01/Pw4Mz6.png",alt:"pbuf结构体"}})]),t._v(" "),a("ul",[a("li",[t._v("由于实际发送或接收的数据包长度不一，而每个pbuf只能管理一部分数据，因此对于大容量的数据包，就必须使用多个pbuf才能完整地描述它")]),t._v(" "),a("li",[t._v("type表明了该pbuf的类型，目前LwIP定义了四种类型的pbuf，分别是："),a("code",[t._v("PBUF_RAM")]),t._v("，"),a("code",[t._v("PBUF_ROM")]),t._v("，"),a("code",[t._v("PBUF_REF")]),t._v("，"),a("code",[t._v("PBUF_POOL")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/01/Pw4RWq.png",alt:"pbuf类型定义"}})]),t._v(" "),a("ul",[a("li",[t._v("PBUF_RAM类型的pbuf是通过内存堆分配得到的，LwIP协议栈和应用程序要传递的数据一般都使用该类型的pbuf。")]),t._v(" "),a("li",[t._v("PBUF_POOL类型的pbuf是通过内存池分配得到的，由于分配此类型的pbuf可以快速完成，适合中断处理，因此它更多地应用在网络设备驱动层。")]),t._v(" "),a("li",[t._v("PBUF_REF和PBUF_ROM类型的pbuf基本相同，他们都是从内存池中申请分配pbuf结构首部空间，而不申请数据区的空间。两者的区别在于，前者指向RAM空间内的某段数据，后者指向ROM空间内的某段数据。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/10/P63kMq.png",alt:"pbuf结构"}})]),t._v(" "),a("h3",{attrs:{id:"pbuf管理api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#pbuf管理api","aria-hidden":"true"}},[t._v("#")]),t._v(" pbuf管理API")]),t._v(" "),a("blockquote",[a("p",[t._v("当使用Netconn API时，则使用netbuf（网络缓冲）发送/接收数据，netbuf只是pbuf结构的封装，它可容纳分配的或引用的数据。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/10/P61IaD.png",alt:"pbuf管理API"}})]),t._v(" "),a("h2",{attrs:{id:"网络接口层"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#网络接口层","aria-hidden":"true"}},[t._v("#")]),t._v(" 网络接口层")]),t._v(" "),a("blockquote",[a("p",[t._v("在LwIP中，物理网络硬件的设备驱动通过网络接口结构体netif来描述一个硬件网络接口，并通过"),a("code",[t._v("netif_add")]),t._v("函数向全局变量netif链表结构增加一个硬件网络接口。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/09/Pys12V.png",alt:"网络接口"}})]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Generic data structure used for all lwIP network interfaces.\n *  The following fields should be filled in by the initialization\n *  function for the device driver: hwaddr_len, hwaddr[], mtu, flags */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("netif")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** pointer to next in linked list */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("netif")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_IPV4")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** IP address configuration in network byte order */")]),t._v("\n  ip_addr_t ip_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  ip_addr_t netmask"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  ip_addr_t gw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_IPV4 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_IPV6")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Array of IPv6 addresses for this netif. */")]),t._v("\n  ip_addr_t ip6_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LWIP_IPV6_NUM_ADDRESSES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** The state of each IPv6 address (Tentative, Preferred, etc).\n   * @see ip6_addr.h */")]),t._v("\n  u8_t ip6_addr_state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("LWIP_IPV6_NUM_ADDRESSES"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" ESP_LWIP")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ipv6_addr_cb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("netif")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v(" netif"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" u8_t ip_idex"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* callback for ipv6 addr states changed */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_IPV6 */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** This function is called by the network device driver\n   *  to pass a packet up the TCP/IP stack. */")]),t._v("\n  netif_input_fn input"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_IPV4")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** This function is called by the IP module when it wants\n   *  to send a packet on the interface. This function typically\n   *  first resolves the hardware address, then sends the packet. */")]),t._v("\n  netif_output_fn output"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_IPV4 */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** This function is called by the ARP module when it wants\n   *  to send a packet on the interface. This function outputs\n   *  the pbuf as-is on the link medium. */")]),t._v("\n  netif_linkoutput_fn linkoutput"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_IPV6")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** This function is called by the IPv6 module when it wants\n   *  to send a packet on the interface. This function typically\n   *  first resolves the hardware address, then sends the packet. */")]),t._v("\n  netif_output_ip6_fn output_ip6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_IPV6 */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_NETIF_STATUS_CALLBACK")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** This function is called when the netif state is set to up or down\n   */")]),t._v("\n  netif_status_callback_fn status_callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_NETIF_STATUS_CALLBACK */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_NETIF_LINK_CALLBACK")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** This function is called when the netif link is set to up or down\n   */")]),t._v("\n  netif_status_callback_fn link_callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_NETIF_LINK_CALLBACK */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_NETIF_REMOVE_CALLBACK")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** This function is called when the netif has been removed */")]),t._v("\n  netif_status_callback_fn remove_callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_NETIF_REMOVE_CALLBACK */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** This field can be set by the device driver and could point\n   *  to state information for the device. */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_DHCP")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** the DHCP client state information for this netif */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dhcp")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dhcp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" ESP_LWIP")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("udp_pcb")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dhcps_pcb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\t\n  dhcp_event_fn dhcp_event"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v("  ")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_DHCP */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_AUTOIP")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** the AutoIP client state information for this netif */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("autoip")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("autoip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_IPV6_AUTOCONFIG")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** is this netif enabled for IPv6 autoconfiguration */")]),t._v("\n  u8_t ip6_autoconfig_enabled"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_IPV6_AUTOCONFIG */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_IPV6_SEND_ROUTER_SOLICIT")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Number of Router Solicitation messages that remain to be sent. */")]),t._v("\n  u8_t rs_count"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_IPV6_SEND_ROUTER_SOLICIT */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_IPV6_DHCP6")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** the DHCPv6 client state information for this netif */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("dhcp6")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("dhcp6"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_IPV6_DHCP6 */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_NETIF_HOSTNAME")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* the hostname for this netif, NULL is a valid value */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("const")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("  hostname"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_NETIF_HOSTNAME */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_CHECKSUM_CTRL_PER_NETIF")]),t._v("\n  u16_t chksum_flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_CHECKSUM_CTRL_PER_NETIF*/")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** maximum transfer unit (in bytes) */")]),t._v("\n  u16_t mtu"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** number of bytes used in hwaddr */")]),t._v("\n  u8_t hwaddr_len"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** link level hardware address of this interface */")]),t._v("\n  u8_t hwaddr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),t._v("NETIF_MAX_HWADDR_LEN"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** flags (see NETIF_FLAG_ above) */")]),t._v("\n  u8_t flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** descriptive abbreviation */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("char")]),t._v(" name"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),a("span",{pre:!0,attrs:{class:"token number"}},[t._v("2")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** number of this interface */")]),t._v("\n  u8_t num"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" MIB2_STATS")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v('/** link type (from "snmp_ifType" enum from snmp_mib2.h) */')]),t._v("\n  u8_t link_type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** (estimate) link speed */")]),t._v("\n  u32_t link_speed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** timestamp at last change made (up/down) */")]),t._v("\n  u32_t ts"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** counters */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("stats_mib2_netif_ctrs")]),t._v(" mib2_counters"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* MIB2_STATS */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_IPV4 && LWIP_IGMP")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** This function could be called to add or delete an entry in the multicast\n      filter table of the ethernet MAC.*/")]),t._v("\n  netif_igmp_mac_filter_fn igmp_mac_filter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_IPV4 && LWIP_IGMP */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_IPV6 && LWIP_IPV6_MLD")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** This function could be called to add or delete an entry in the IPv6 multicast\n      filter table of the ethernet MAC. */")]),t._v("\n  netif_mld_mac_filter_fn mld_mac_filter"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_IPV6 && LWIP_IPV6_MLD */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_NETIF_HWADDRHINT")]),t._v("\n  u8_t "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("addr_hint"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_NETIF_HWADDRHINT */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" ENABLE_LOOPBACK")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* List of packets to be queued for ourselves. */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pbuf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("loop_first"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pbuf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("loop_last"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_LOOPBACK_MAX_PBUFS")]),t._v("\n  u16_t loop_cnt_current"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_LOOPBACK_MAX_PBUFS */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ENABLE_LOOPBACK */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" ESP_LWIP")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("l2_buffer_free_notify"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("user_buf"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Allows LWIP to notify driver when a L2-supplied pbuf can be freed */")]),t._v("\n  ip_addr_t last_ip_addr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Store last non-zero ip address */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br"),a("span",{staticClass:"line-number"},[t._v("54")]),a("br"),a("span",{staticClass:"line-number"},[t._v("55")]),a("br"),a("span",{staticClass:"line-number"},[t._v("56")]),a("br"),a("span",{staticClass:"line-number"},[t._v("57")]),a("br"),a("span",{staticClass:"line-number"},[t._v("58")]),a("br"),a("span",{staticClass:"line-number"},[t._v("59")]),a("br"),a("span",{staticClass:"line-number"},[t._v("60")]),a("br"),a("span",{staticClass:"line-number"},[t._v("61")]),a("br"),a("span",{staticClass:"line-number"},[t._v("62")]),a("br"),a("span",{staticClass:"line-number"},[t._v("63")]),a("br"),a("span",{staticClass:"line-number"},[t._v("64")]),a("br"),a("span",{staticClass:"line-number"},[t._v("65")]),a("br"),a("span",{staticClass:"line-number"},[t._v("66")]),a("br"),a("span",{staticClass:"line-number"},[t._v("67")]),a("br"),a("span",{staticClass:"line-number"},[t._v("68")]),a("br"),a("span",{staticClass:"line-number"},[t._v("69")]),a("br"),a("span",{staticClass:"line-number"},[t._v("70")]),a("br"),a("span",{staticClass:"line-number"},[t._v("71")]),a("br"),a("span",{staticClass:"line-number"},[t._v("72")]),a("br"),a("span",{staticClass:"line-number"},[t._v("73")]),a("br"),a("span",{staticClass:"line-number"},[t._v("74")]),a("br"),a("span",{staticClass:"line-number"},[t._v("75")]),a("br"),a("span",{staticClass:"line-number"},[t._v("76")]),a("br"),a("span",{staticClass:"line-number"},[t._v("77")]),a("br"),a("span",{staticClass:"line-number"},[t._v("78")]),a("br"),a("span",{staticClass:"line-number"},[t._v("79")]),a("br"),a("span",{staticClass:"line-number"},[t._v("80")]),a("br"),a("span",{staticClass:"line-number"},[t._v("81")]),a("br"),a("span",{staticClass:"line-number"},[t._v("82")]),a("br"),a("span",{staticClass:"line-number"},[t._v("83")]),a("br"),a("span",{staticClass:"line-number"},[t._v("84")]),a("br"),a("span",{staticClass:"line-number"},[t._v("85")]),a("br"),a("span",{staticClass:"line-number"},[t._v("86")]),a("br"),a("span",{staticClass:"line-number"},[t._v("87")]),a("br"),a("span",{staticClass:"line-number"},[t._v("88")]),a("br"),a("span",{staticClass:"line-number"},[t._v("89")]),a("br"),a("span",{staticClass:"line-number"},[t._v("90")]),a("br"),a("span",{staticClass:"line-number"},[t._v("91")]),a("br"),a("span",{staticClass:"line-number"},[t._v("92")]),a("br"),a("span",{staticClass:"line-number"},[t._v("93")]),a("br"),a("span",{staticClass:"line-number"},[t._v("94")]),a("br"),a("span",{staticClass:"line-number"},[t._v("95")]),a("br"),a("span",{staticClass:"line-number"},[t._v("96")]),a("br"),a("span",{staticClass:"line-number"},[t._v("97")]),a("br"),a("span",{staticClass:"line-number"},[t._v("98")]),a("br"),a("span",{staticClass:"line-number"},[t._v("99")]),a("br"),a("span",{staticClass:"line-number"},[t._v("100")]),a("br"),a("span",{staticClass:"line-number"},[t._v("101")]),a("br"),a("span",{staticClass:"line-number"},[t._v("102")]),a("br"),a("span",{staticClass:"line-number"},[t._v("103")]),a("br"),a("span",{staticClass:"line-number"},[t._v("104")]),a("br"),a("span",{staticClass:"line-number"},[t._v("105")]),a("br"),a("span",{staticClass:"line-number"},[t._v("106")]),a("br"),a("span",{staticClass:"line-number"},[t._v("107")]),a("br"),a("span",{staticClass:"line-number"},[t._v("108")]),a("br"),a("span",{staticClass:"line-number"},[t._v("109")]),a("br"),a("span",{staticClass:"line-number"},[t._v("110")]),a("br"),a("span",{staticClass:"line-number"},[t._v("111")]),a("br"),a("span",{staticClass:"line-number"},[t._v("112")]),a("br"),a("span",{staticClass:"line-number"},[t._v("113")]),a("br"),a("span",{staticClass:"line-number"},[t._v("114")]),a("br"),a("span",{staticClass:"line-number"},[t._v("115")]),a("br"),a("span",{staticClass:"line-number"},[t._v("116")]),a("br"),a("span",{staticClass:"line-number"},[t._v("117")]),a("br"),a("span",{staticClass:"line-number"},[t._v("118")]),a("br"),a("span",{staticClass:"line-number"},[t._v("119")]),a("br"),a("span",{staticClass:"line-number"},[t._v("120")]),a("br"),a("span",{staticClass:"line-number"},[t._v("121")]),a("br"),a("span",{staticClass:"line-number"},[t._v("122")]),a("br"),a("span",{staticClass:"line-number"},[t._v("123")]),a("br"),a("span",{staticClass:"line-number"},[t._v("124")]),a("br"),a("span",{staticClass:"line-number"},[t._v("125")]),a("br"),a("span",{staticClass:"line-number"},[t._v("126")]),a("br"),a("span",{staticClass:"line-number"},[t._v("127")]),a("br"),a("span",{staticClass:"line-number"},[t._v("128")]),a("br"),a("span",{staticClass:"line-number"},[t._v("129")]),a("br"),a("span",{staticClass:"line-number"},[t._v("130")]),a("br"),a("span",{staticClass:"line-number"},[t._v("131")]),a("br"),a("span",{staticClass:"line-number"},[t._v("132")]),a("br"),a("span",{staticClass:"line-number"},[t._v("133")]),a("br"),a("span",{staticClass:"line-number"},[t._v("134")]),a("br"),a("span",{staticClass:"line-number"},[t._v("135")]),a("br"),a("span",{staticClass:"line-number"},[t._v("136")]),a("br"),a("span",{staticClass:"line-number"},[t._v("137")]),a("br"),a("span",{staticClass:"line-number"},[t._v("138")]),a("br"),a("span",{staticClass:"line-number"},[t._v("139")]),a("br"),a("span",{staticClass:"line-number"},[t._v("140")]),a("br"),a("span",{staticClass:"line-number"},[t._v("141")]),a("br"),a("span",{staticClass:"line-number"},[t._v("142")]),a("br"),a("span",{staticClass:"line-number"},[t._v("143")]),a("br"),a("span",{staticClass:"line-number"},[t._v("144")]),a("br"),a("span",{staticClass:"line-number"},[t._v("145")]),a("br"),a("span",{staticClass:"line-number"},[t._v("146")]),a("br"),a("span",{staticClass:"line-number"},[t._v("147")]),a("br"),a("span",{staticClass:"line-number"},[t._v("148")]),a("br"),a("span",{staticClass:"line-number"},[t._v("149")]),a("br"),a("span",{staticClass:"line-number"},[t._v("150")]),a("br"),a("span",{staticClass:"line-number"},[t._v("151")]),a("br"),a("span",{staticClass:"line-number"},[t._v("152")]),a("br"),a("span",{staticClass:"line-number"},[t._v("153")]),a("br")])]),a("ul",[a("li",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/09/PysfPI.png",alt:"IP信息"}})]),t._v(" "),a("li",[t._v("ip_addr，netmask，gw分别表示了IP地址、子网掩码、网关，建议这样子设定："),a("code",[t._v("IP4_ADDR(&ipaddr,192,168,1,100)")])]),t._v(" "),a("li",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/09/Pysqaj.png",alt:"硬件信息"}})]),t._v(" "),a("li",[t._v("mtu表明最大的网络传输个数，以字节为单位")]),t._v(" "),a("li",[t._v("hwaddr存放了硬件接口的地址，对于以太网而言，就是MAC地址")]),t._v(" "),a("li",[t._v("flags是硬件接口状态信息标志位，如是否建立连接状态，是否允许广播功能等")]),t._v(" "),a("li",[t._v('name用来表示硬件接口使用的驱动类型，缩写，2个字节，比如蓝牙设备为“bl"，wifi设备为"wl"')]),t._v(" "),a("li",[t._v("num用来表示硬件接口的编号，当两个硬件接口的name字段相同时，该字段可以用来区分是哪一个硬件接口")]),t._v(" "),a("li",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/09/PysXin.png",alt:"驱动功能"}})]),t._v(" "),a("li",[t._v("input是一个函数指针，它指向的函数用于将网络硬件接口接收到的数据包传递给上层TCP/IP协议栈")]),t._v(" "),a("li",[t._v("output是一个函数指针，它所指向的函数用于将IP层的数据包发送到网络硬件接口上")]),t._v(" "),a("li",[t._v("linkoutput是一个函数指针，在ARP模块中调用，output指向的函数也是通过调用linkoutput指向的函数实现数据报发送的")])]),t._v(" "),a("h2",{attrs:{id:"arp处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#arp处理","aria-hidden":"true"}},[t._v("#")]),t._v(" ARP处理")]),t._v(" "),a("blockquote",[a("p",[t._v("ARP协议是TCP/IP协议的基础，本质是实现IP地址与底层物理地址的相互转换。ARP协议的核心是ARP缓存表，而ARP协议的实质就是对缓存表的建立、更新、查询等操作。ARP缓存表是由若干缓存表项组成，在LwIP中，描述缓存表项的数据结构叫etharp_entry。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/02/P0CQUA.png",alt:"ARP协议数据包格式"}})]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("etharp_entry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" ARP_QUEUEING")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Pointer to queue of pending outgoing packets on this ARP entry. */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("etharp_q_entry")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("else")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ARP_QUEUEING */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** Pointer to a single pending outgoing packet on this ARP entry. */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("pbuf")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("q"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* ARP_QUEUEING */")]),t._v("\n  ip4_addr_t ipaddr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("netif")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("netif"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("eth_addr")]),t._v(" ethaddr"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  u16_t ctime"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  u8_t state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br")])]),a("ul",[a("li",[t._v("ipaddr存放IP地址，ethaddr存放物理地址，state表示缓存项的状态（例如是否为空，是否稳定），ctime记录ARP缓存项处于某个状态的时间，当某表项的ctime值大于规定的表项最大生存值时，LwIP内核会删除该表项。因此使用ARP功能时，必须设置一个ARP超时事件，该超时事件的基本功能就是对每个表项的ctime字段值加1，然后删除那些生存时间大于最大生存值的表项")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/02/P0PcWt.jpg",alt:"ARP处理流程"}})]),t._v(" "),a("ul",[a("li",[t._v("函数ethernet_input根据报文首部的帧类型字段判断接收到的报文类型，如果是IP包，则将该包传递给etharp_ip_input，如果是ARP包，则将该包递交给etharp_arp_input")]),t._v(" "),a("li",[t._v("函数etharp_ip_input调用函数update_arp_entry，它是将报文首部的MAC地址和IP地址更新到ARP缓存中")]),t._v(" "),a("li",[t._v("函数etharp_arp_input首先判断接收到的ARP数据包的类型，如果是ARP请求包，那么首先判断这个包是否是给自己的，如果是给自己的，就在原有包的基础上重组一个ARP应答包发送出去；如果不是给自己的，则直接忽略而如果接收到的数据包是ARP应答包，那么就调用update_arp_entry更新ARP缓存表")])]),t._v(" "),a("h2",{attrs:{id:"ip处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#ip处理","aria-hidden":"true"}},[t._v("#")]),t._v(" IP处理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/02/P0CUbQ.png",alt:"IP协议数据包格式"}})]),t._v(" "),a("h4",{attrs:{id:"lwip软件大致框架"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lwip软件大致框架","aria-hidden":"true"}},[t._v("#")]),t._v(" LwIP软件大致框架")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/02/P0keJA.jpg",alt:"LwIP整体框架图"}})]),t._v(" "),a("ul",[a("li",[t._v("ip_input会做各项检查，包括协议版本号，IP首部的校验值，源IP地址是否有效等，然后检测IP数据包中的目的IP地址是否与本节点的IP地址相符，如果是本节点的IP地址，则根据该IP数据包首部的协议字段判断该数据包应该被递交到哪个上层协议，并调用相应的函数。如果是UDP协议，则调用udp_input函数；如果是TCP协议，则调用tcp_input函数；如果是ICMP协议，则调用icmp_input函数；如果是IGMP协议，则调用igmp_input函数；如果都不是，则调用函数icmp_dest_unreach返回一个协议不可达ICMP数据包给源主机。如果不是本节点的IP地址，则通过调用函数ip_forward对数据包进行转发。需要注意，由于一个节点可能含有多个IP地址，因此ip_input函数会遍历网络接口链表netif_list上的netif结构变量，来查找与IP数据包中相匹配的IP地址。")]),t._v(" "),a("li",[t._v("ip_output使用ip_route函数查找目标网络接口netif来发送IP数据包。当网络接口netif确定后，IP数据包通过函数ip_output_if发送出去。若ip_route没有找到合适的网络接口，则丢弃该报文，终止本次发送。函数ip_route通过遍历网络接口链表netif_list，查找与目的IIP地址在同一个子网中的网络接口，并将该网络接口返回给变量netif。")])]),t._v(" "),a("h2",{attrs:{id:"icmp处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#icmp处理","aria-hidden":"true"}},[t._v("#")]),t._v(" ICMP处理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/02/P0AVmT.jpg",alt:"ICMP协议数据包格式"}})]),t._v(" "),a("ul",[a("li",[t._v("icmp_input在ip_input中被调用，它处理接收到的ICMP数据包，并根据包类型做相应的处理。在LwIP协议栈中，它只处理ICMP回显请求包，对其他类型的ICMP包不作响应。icmp_input在处理ICMP回显请求时，首先判断该数据包是否为广播或者组播包，如果是，则直接返回，不再继续处理；如果不是，则继续判断该数据包长度是否小于ICMP回显请求头部长度，如果是则丢弃数据包；如果不是则将该ICMP报文类型字段变为0，重新计算校验和，并将IP报文首部的源IP地址和目的IP地址交换位置，并通过调用函数ip_output_if将数据包发送出去。")]),t._v(" "),a("li",[t._v("函数icmp_dest_unreach在ip_input、udp_input中被调用，它的功能是通过调用函数icmp_send_response发送一个“目的不可到达”类型的icmp报文。在函数ip_input中，当所接收的IP报文协议字段不可识别时，icmp_dest_unreach就被调用。而在UDP处理器中，若不能找到与接收的报文相对应的端口号，则icmp_dest_unreach也将被调用。")]),t._v(" "),a("li",[t._v("函数icmp_time_exceeded在ip_forward中被调用，它的功能是通过调用函数icmp_send_response发送一个“超时”类型的ICMP报文。在函数ip_forward中，当TTL减小为0时，调用该函数。")])]),t._v(" "),a("h2",{attrs:{id:"udp处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#udp处理","aria-hidden":"true"}},[t._v("#")]),t._v(" UDP处理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/02/P0JfdH.png",alt:"UDP协议数据包"}})]),t._v(" "),a("ul",[a("li",[t._v("函数udp_input将检查报文的UDP校验，最终调用函数recv，将收到的报文传递给应用层程序")]),t._v(" "),a("li",[t._v("当应用层程序要通过UDP协议向外发送IP报文时，将通过调用函数udp_send实现，函数udp_send通过调用IP层的函数ip_output_if实现报文的发送")]),t._v(" "),a("li",[t._v("LwIP使用链表结构体udp_pcb来保存每一个UDP会话的状态")])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("udp_pcb")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Common members of all PCB types */")]),t._v("\n  IP_PCB"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* Protocol specific PCB members */")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("udp_pcb")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("next"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n  u8_t flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** ports are in host byte order */")]),t._v("\n  u16_t local_port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" remote_port"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_MULTICAST_TX_OPTIONS")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** outgoing network interface for multicast packets */")]),t._v("\n  ip_addr_t multicast_ip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** TTL for outgoing multicast packets */")]),t._v("\n  u8_t mcast_ttl"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_MULTICAST_TX_OPTIONS */")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_UDPLITE")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** used for UDP_LITE only */")]),t._v("\n  u16_t chksum_len_rx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(",")]),t._v(" chksum_len_tx"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_UDPLITE */")]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** receive callback function */")]),t._v("\n  udp_recv_fn recv"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** user-supplied argument for the recv callback */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("recv_arg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br")])]),a("h2",{attrs:{id:"tcp处理"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp处理","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP处理")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/02/P0JULF.png",alt:"TCP协议数据包"}})]),t._v(" "),a("ul",[a("li",[t._v("TCP的滑动窗口协议是用于实现流量控制的")]),t._v(" "),a("li",[t._v("TCP的超时和重传机制提高了数据传输的可靠性")]),t._v(" "),a("li",[t._v("拥塞控制是通过慢启动算法和拥塞避免算法来实现的")]),t._v(" "),a("li",[t._v("LwIP中含有两个定时器函数：tcp_fasttmr和tcp_slowtmr，tcp_fasttmr每250ms调用一次，tcp_slowtmr每500ms调用一次。快速定时器主要做两个方面的事情：向上层递交上层一直未接收的数据，二是发送该连接上的延迟ACK请求数据段。慢速定时器参与了较多功能，如超时与重传、拥塞控制等。")])]),t._v(" "),a("h2",{attrs:{id:"常用api接口"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#常用api接口","aria-hidden":"true"}},[t._v("#")]),t._v(" 常用API接口")]),t._v(" "),a("blockquote",[a("p",[t._v("LwIP提供了3种应用程序接口：")]),t._v(" "),a("ol",[a("li",[t._v("直接调用协议栈各模块的函数，它是基于回调函数的API接口，也成为RAW API接口，回调函数直接被协议栈代码调用，因此应用程序代码和TCP/IP协议栈运行在同一个进程里，无需使用操作系统，两者之间这种良好的结合可以使得程序的执行效率更高，而且在运行中它占用更少的内存资源")]),t._v(" "),a("li",[t._v("使用LwIP提供的专用API接口，也称为Sequential API接口，程序的执行过程基于open-read-write-close模型，需要操作系统的支持，另外需要在文件lwipopts.h中把宏定义"),a("code",[t._v("NO_SYS")]),t._v("定义为0。Sequential API被分成两部分实现，一部分驻留在应用程序进程中，另一部分在TCP/IP协议栈进程内实现。这两部分API之间采用由操作系统模拟层提供的进程间通信机制进行通信。在LwIP中，操作系统模拟层是LwIP协议栈的一部分，它存在的目的是方面LwIP的移植，它在底层操作系统和LwIP协议栈之间提供了一个接口，当用户移植LwIP到一个新的目标系统的时候，只需要修改这个接口内的函数即可。驻留在应用程序进程中的API接口与TCP/IP协议栈进程中的API之间通过共享内存传递数据，对该共享内存区的描述是采用netbuf结构体")]),t._v(" "),a("li",[t._v("BSD Socket兼容的Socket函数接口，但是BSD套接字需要将发送的数据从应用程序复制到TCP/IP协议栈的内部缓冲区，将会消耗系统有限的资源")])])]),t._v(" "),a("h3",{attrs:{id:"tcp-raw-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-raw-api","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP RAW API")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/10/P6l7j0.png",alt:"TCP RAW API"}})]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("struct tcp_pcb* tcp_new()")]),t._v(" "),a("td",[t._v("新建tcp协议控制块")])]),t._v(" "),a("tr",[a("td",[t._v("ert_t tcp_bind(struct tcp_pcb* pcb,struct ip_addr* ipaddr,u16_t port)")]),t._v(" "),a("td",[t._v("绑定本地IP地址和端口号，如果ipaddr为IP_ADDR_ANY，则将连接绑定到所有的本地IP地址上")])]),t._v(" "),a("tr",[a("td",[t._v("struct tcp_pcb* tcp_listen(struct tcp_pcb* pcb)")]),t._v(" "),a("td",[t._v("使指定的连接开始进入监听状态，如果监听成功，就返回一个新的连接控制块pcb")])]),t._v(" "),a("tr",[a("td",[t._v("void tcp_accepted(struct tcp_pcb* pcb)")]),t._v(" "),a("td",[t._v("通知LwIP一个新来的连接已经被接收，这个函数通常在由tcp_accept指定的回调函数中被调用")])]),t._v(" "),a("tr",[a("td",[t._v("void tcp_accept(struct tcp_pcb* pcb,err_t (*accept)(void* arg,struct tcp_pcb* newpcb,err_t err))")]),t._v(" "),a("td",[t._v("指定处于监听状态的连接，在成功建立连接后要调用的回调方法")])]),t._v(" "),a("tr",[a("td",[t._v("err_t tcp_connect(struct tcp_pcb* pcb,struct ip_addr* ipaddr,u16_t port,err_t (* connected)(void* arg,struct tcp_pcb* tpcb,err_t err))")]),t._v(" "),a("td",[t._v("请求连接到执行的远程主机")])]),t._v(" "),a("tr",[a("td",[t._v("err_t tcp_write(struct tcp_pcb* pcb,void* dataptr,u16_t len,u8_t copy)")]),t._v(" "),a("td",[t._v("发送TCP数据，将要发送的数据放入发送队列中，由协议栈内核发送，copy为0则不会为发送的数据分配新的内存空间")])]),t._v(" "),a("tr",[a("td",[t._v("void tcp_sent(struct tcp_pcb* pcb,err_t (*sent)(void* arg,struct tcp_pcb* tpcb,u16_t len))")]),t._v(" "),a("td",[t._v("指定当远程主机成功接收数据后，应用程序调用的回调函数")])]),t._v(" "),a("tr",[a("td",[t._v("void tcp_recv(struct tcp_pcb* pcb,err_t (* recv)(void* arg,struct tcp_pcb* tpcb,struct pbuf* p,err_t err))")]),t._v(" "),a("td",[t._v("指定接收数据时调用的回调函数")])]),t._v(" "),a("tr",[a("td",[t._v("void tcp_recved(struct tcp_pcb* pcb,u16_t len)")]),t._v(" "),a("td",[t._v("用于获取接收到的数据的长度，必须在tcp_recv指定的回调函数中被调用")])]),t._v(" "),a("tr",[a("td",[t._v("err_t tcp_close(struct tcp_pcb* pcb)")]),t._v(" "),a("td",[t._v("关闭一个指定的TCP连接，调用该函数后将会释放pcb控制块所占用的内存空间")])]),t._v(" "),a("tr",[a("td",[t._v("void tcp_abort(struct tcp_pcb* pcb)")]),t._v(" "),a("td",[t._v("终止一个指定的连接，调用该函数后，pcb控制块所占用的内存空间将被释放")])]),t._v(" "),a("tr",[a("td",[t._v("void tcp_err(struct tcp_pcb* pcb,void (*err)(void* arg,err_t err))")]),t._v(" "),a("td",[t._v("指定处理错误的回调函数")])])])]),t._v(" "),a("h3",{attrs:{id:"tcp-raw-api-2"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#tcp-raw-api-2","aria-hidden":"true"}},[t._v("#")]),t._v(" TCP RAW API")]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/10/P6lLHU.png",alt:"UDP RAW API"}})]),t._v(" "),a("h3",{attrs:{id:"netconn-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#netconn-api","aria-hidden":"true"}},[t._v("#")]),t._v(" Netconn API")]),t._v(" "),a("ul",[a("li",[t._v("数据结构netconn描述了应用程序要使用API函数机那里一个连接的各种属性，包括了连接的类型、最近的故障代码、回调函数等。")])]),t._v(" "),a("div",{staticClass:"language-c line-numbers-mode"},[a("pre",{pre:!0,attrs:{class:"language-c"}},[a("code",[a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** A netconn descriptor */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("netconn")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** type of the netconn (TCP, UDP or RAW) */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("netconn_type")]),t._v(" type"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** current state of the netconn */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("enum")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("netconn_state")]),t._v(" state"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** the lwIP internal protocol control block */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("union")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("ip_pcb")]),t._v("  "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("ip"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("tcp_pcb")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("tcp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("udp_pcb")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("udp"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("raw_pcb")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("raw"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v(" pcb"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** the last error this netconn had */")]),t._v("\n  err_t last_err"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  \n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" !LWIP_NETCONN_SEM_PER_THREAD")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** sem that is used to synchronously execute functions in the core context */")]),t._v("\n  sys_sem_t op_completed"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")])]),t._v("\n\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** mbox where received packets are stored until they are fetched\n      by the netconn application thread (can grow quite big) */")]),t._v("\n  sys_mbox_t recvmbox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_TCP")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** mbox where new connections are stored until processed\n      by the application thread */")]),t._v("\n  sys_mbox_t acceptmbox"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_TCP */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** only used for socket layer */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_SOCKET")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" socket"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_SOCKET */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_SO_SNDTIMEO")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** timeout to wait for sending data (which means enqueueing data for sending\n      in internal buffers) in milliseconds */")]),t._v("\n  s32_t send_timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_SO_RCVTIMEO */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_SO_RCVTIMEO")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** timeout in milliseconds to wait for new data to be received\n      (or connections to arrive for listening netconns) */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" recv_timeout"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_SO_RCVTIMEO */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_SO_RCVBUF")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** maximum amount of bytes queued in recvmbox\n      not used for TCP: adjust TCP_WND instead! */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" recv_bufsize"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** number of bytes currently in recvmbox to be received,\n      tested against recv_bufsize to limit bytes on recvmbox\n      for UDP and RAW, used for FIONREAD */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" recv_avail"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_SO_RCVBUF */")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_SO_LINGER")]),t._v("\n   "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** values <0 mean linger is disabled, values > 0 are seconds to linger */")]),t._v("\n  s16_t linger"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_SO_LINGER */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** flags holding more netconn-internal state, see NETCONN_FLAG_* defines */")]),t._v("\n  u8_t flags"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("if")]),t._v(" LWIP_TCP")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** TCP: when data passed to netconn_write doesn't fit into the send buffer,\n      this temporarily stores how much is already sent. */")]),t._v("\n  size_t write_offset"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** TCP: when data passed to netconn_write doesn't fit into the send buffer,\n      this temporarily stores the message.\n      Also used during connect and close. */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("struct")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("api_msg_msg")]),t._v(" "),a("span",{pre:!0,attrs:{class:"token operator"}},[t._v("*")]),t._v("current_msg"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token macro property"}},[t._v("#"),a("span",{pre:!0,attrs:{class:"token directive keyword"}},[t._v("endif")]),t._v(" ")]),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/* LWIP_TCP */")]),t._v("\n  "),a("span",{pre:!0,attrs:{class:"token comment"}},[t._v("/** A callback function that is informed about events for this netconn */")]),t._v("\n  netconn_callback callback"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n"),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),a("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n")])]),t._v(" "),a("div",{staticClass:"line-numbers-wrapper"},[a("span",{staticClass:"line-number"},[t._v("1")]),a("br"),a("span",{staticClass:"line-number"},[t._v("2")]),a("br"),a("span",{staticClass:"line-number"},[t._v("3")]),a("br"),a("span",{staticClass:"line-number"},[t._v("4")]),a("br"),a("span",{staticClass:"line-number"},[t._v("5")]),a("br"),a("span",{staticClass:"line-number"},[t._v("6")]),a("br"),a("span",{staticClass:"line-number"},[t._v("7")]),a("br"),a("span",{staticClass:"line-number"},[t._v("8")]),a("br"),a("span",{staticClass:"line-number"},[t._v("9")]),a("br"),a("span",{staticClass:"line-number"},[t._v("10")]),a("br"),a("span",{staticClass:"line-number"},[t._v("11")]),a("br"),a("span",{staticClass:"line-number"},[t._v("12")]),a("br"),a("span",{staticClass:"line-number"},[t._v("13")]),a("br"),a("span",{staticClass:"line-number"},[t._v("14")]),a("br"),a("span",{staticClass:"line-number"},[t._v("15")]),a("br"),a("span",{staticClass:"line-number"},[t._v("16")]),a("br"),a("span",{staticClass:"line-number"},[t._v("17")]),a("br"),a("span",{staticClass:"line-number"},[t._v("18")]),a("br"),a("span",{staticClass:"line-number"},[t._v("19")]),a("br"),a("span",{staticClass:"line-number"},[t._v("20")]),a("br"),a("span",{staticClass:"line-number"},[t._v("21")]),a("br"),a("span",{staticClass:"line-number"},[t._v("22")]),a("br"),a("span",{staticClass:"line-number"},[t._v("23")]),a("br"),a("span",{staticClass:"line-number"},[t._v("24")]),a("br"),a("span",{staticClass:"line-number"},[t._v("25")]),a("br"),a("span",{staticClass:"line-number"},[t._v("26")]),a("br"),a("span",{staticClass:"line-number"},[t._v("27")]),a("br"),a("span",{staticClass:"line-number"},[t._v("28")]),a("br"),a("span",{staticClass:"line-number"},[t._v("29")]),a("br"),a("span",{staticClass:"line-number"},[t._v("30")]),a("br"),a("span",{staticClass:"line-number"},[t._v("31")]),a("br"),a("span",{staticClass:"line-number"},[t._v("32")]),a("br"),a("span",{staticClass:"line-number"},[t._v("33")]),a("br"),a("span",{staticClass:"line-number"},[t._v("34")]),a("br"),a("span",{staticClass:"line-number"},[t._v("35")]),a("br"),a("span",{staticClass:"line-number"},[t._v("36")]),a("br"),a("span",{staticClass:"line-number"},[t._v("37")]),a("br"),a("span",{staticClass:"line-number"},[t._v("38")]),a("br"),a("span",{staticClass:"line-number"},[t._v("39")]),a("br"),a("span",{staticClass:"line-number"},[t._v("40")]),a("br"),a("span",{staticClass:"line-number"},[t._v("41")]),a("br"),a("span",{staticClass:"line-number"},[t._v("42")]),a("br"),a("span",{staticClass:"line-number"},[t._v("43")]),a("br"),a("span",{staticClass:"line-number"},[t._v("44")]),a("br"),a("span",{staticClass:"line-number"},[t._v("45")]),a("br"),a("span",{staticClass:"line-number"},[t._v("46")]),a("br"),a("span",{staticClass:"line-number"},[t._v("47")]),a("br"),a("span",{staticClass:"line-number"},[t._v("48")]),a("br"),a("span",{staticClass:"line-number"},[t._v("49")]),a("br"),a("span",{staticClass:"line-number"},[t._v("50")]),a("br"),a("span",{staticClass:"line-number"},[t._v("51")]),a("br"),a("span",{staticClass:"line-number"},[t._v("52")]),a("br"),a("span",{staticClass:"line-number"},[t._v("53")]),a("br"),a("span",{staticClass:"line-number"},[t._v("54")]),a("br"),a("span",{staticClass:"line-number"},[t._v("55")]),a("br"),a("span",{staticClass:"line-number"},[t._v("56")]),a("br"),a("span",{staticClass:"line-number"},[t._v("57")]),a("br"),a("span",{staticClass:"line-number"},[t._v("58")]),a("br"),a("span",{staticClass:"line-number"},[t._v("59")]),a("br"),a("span",{staticClass:"line-number"},[t._v("60")]),a("br"),a("span",{staticClass:"line-number"},[t._v("61")]),a("br"),a("span",{staticClass:"line-number"},[t._v("62")]),a("br"),a("span",{staticClass:"line-number"},[t._v("63")]),a("br"),a("span",{staticClass:"line-number"},[t._v("64")]),a("br"),a("span",{staticClass:"line-number"},[t._v("65")]),a("br"),a("span",{staticClass:"line-number"},[t._v("66")]),a("br"),a("span",{staticClass:"line-number"},[t._v("67")]),a("br"),a("span",{staticClass:"line-number"},[t._v("68")]),a("br"),a("span",{staticClass:"line-number"},[t._v("69")]),a("br"),a("span",{staticClass:"line-number"},[t._v("70")]),a("br"),a("span",{staticClass:"line-number"},[t._v("71")]),a("br")])]),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/10/P61AED.png",alt:"Netconn API"}})]),t._v(" "),a("table",[a("thead",[a("tr",[a("th",[t._v("函数")]),t._v(" "),a("th",[t._v("说明")])])]),t._v(" "),a("tbody",[a("tr",[a("td",[t._v("struct netconn* netconn_new_with_proto_and_callback(enum netconn_type t,u8_t proto,netconn_callback callback)")]),t._v(" "),a("td",[t._v("建立一个新的netconn连接")])]),t._v(" "),a("tr",[a("td",[t._v("err_t netconn_delete(struct netconn* conn)")]),t._v(" "),a("td",[t._v("删除netconn所指向的连接")])]),t._v(" "),a("tr",[a("td",[t._v("err_t netconn_getaddr(struct netconn* conn,struct ip_addr* addr,u16_t* port,u8_t local)")]),t._v(" "),a("td",[t._v("获取conn连接的主机IP地址和端口号")])]),t._v(" "),a("tr",[a("td",[t._v("err_t netconn_bind(struct netconn* conn,struct ip_addr* addr,u16_t port)")]),t._v(" "),a("td",[t._v("将一个IP地址及端口号与conn指向的而连接绑定")])]),t._v(" "),a("tr",[a("td",[t._v("err_t netconn_connect(struct netconn* conn,struct ip_addr* addr,u16_t port)")]),t._v(" "),a("td",[t._v("将服务器端的IP地址和端口号与conn指向的连接绑定")])]),t._v(" "),a("tr",[a("td",[t._v("err_t netconn_disconnect(struct netconn* conn)")]),t._v(" "),a("td",[t._v("断开conn指向的连接")])]),t._v(" "),a("tr",[a("td",[t._v("err_t netconn_listen_with_backlog(struct netconn* conn，u8_t backlog)")]),t._v(" "),a("td",[t._v("将conn指向的连接设定为监听状态")])]),t._v(" "),a("tr",[a("td",[t._v("struct netconn* netconn_accept(struct netconn* conn)")]),t._v(" "),a("td",[t._v("接收客户端的连接，该函数会阻塞在acceptmbox邮箱上")])]),t._v(" "),a("tr",[a("td",[t._v("struct netbuf* netconn_recv(struct netconn* conn)")]),t._v(" "),a("td",[t._v("接收数据，接收到的数据被封装为netbuf结构")])]),t._v(" "),a("tr",[a("td",[t._v("err_t netconn_sendto(struct netconn* conn,struct netbuf* buf,struct ip_addr* addr,u16_t port)")]),t._v(" "),a("td",[t._v("向一个指定的IP地址和端口号发送数据，这个函数只能用在conn类型为UDP或者RAW的连接中")])]),t._v(" "),a("tr",[a("td",[t._v("err_t netconn_write(struct netconn* conn,const void* dataptr,size_t size,u8_t apiflag)")]),t._v(" "),a("td",[t._v("向相应的TCP连接上发送数据，这个函数只能用于发送TCP的报文")])]),t._v(" "),a("tr",[a("td",[t._v("err_t nnetconn_close(struct netconn* conn)")]),t._v(" "),a("td",[t._v("关闭conn指向的连接")])])])]),t._v(" "),a("ul",[a("li",[t._v("netconn_new_with_proto_and_callback首先调用netconn_alloc函数分配并初始化一个netconn结构，接下来该函数会构建一个api_msg消息，该消息要求内核执行函数do_newconn，最后调用函数tcpip_apimsg来将消息包装成tcpip_msg结构并发送出去。tcpip_thread函数解析该消息并调用函数do_newconn，do_newconn根据参数的类型调用函数tcp_new创建一个TCP控制块")]),t._v(" "),a("li",[t._v("tcpip_thread是处理TCP/IP的内核协议栈进程，它只接收tcpip_msg结构封装的消息，并根据消息的类型来判定该消息来自物理网卡或应用层程序。如果接收到网卡的IP报文，则将该报文递交给ip_input函数；如果是应用层程序发送的消息，则通过调用消息指定的内核处理函数来完成相应的功能")])]),t._v(" "),a("h3",{attrs:{id:"socket-api"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#socket-api","aria-hidden":"true"}},[t._v("#")]),t._v(" Socket API")]),t._v(" "),a("blockquote",[a("p",[t._v("LwIP提供了标准BSD套接字API，它也是有序API，在内存构建于Netconn API之上。所谓“有序”是指其执行模型基于典型的阻塞式打开-读-写-关闭机制。")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/10/P61V4H.png",alt:"Socket API"}})]),t._v(" "),a("h2",{attrs:{id:"lwip移植"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lwip移植","aria-hidden":"true"}},[t._v("#")]),t._v(" LwIP移植")]),t._v(" "),a("blockquote",[a("ol",[a("li",[t._v("以太网接口任务用于接收来自物理网卡的数据报文，同时将收到的报文通过FreeRTOS提供的邮箱传递给TCP/IP协议栈任务。以太网接口任务平时处于挂起状态，当硬件收到报文时，将产生接收报文中断，该终端以信号量的方式将以太网接口任务激活")]),t._v(" "),a("li",[t._v("应用程序使用TCP/IP协议栈提供的Sequential API接口访问LwIP，同时这两个独立的任务需要使用FreeRTOS提供的邮箱机制实现彼此之间信息的交互。Sequential API接口函数在FreeRTOS操作系统运行环境下是“阻塞”函数，也就是说应用程序任务在调用Sequential API接口函数时，将会被阻塞，直到收到来自TCP/IP协议栈返回的消息应答")]),t._v(" "),a("li",[t._v("基于LwIP的TCP/IP协议栈与应用程序运行在两个独立的任务中")])])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/09/PyyVRx.jpg",alt:"网卡驱动移植"}})]),t._v(" "),a("ol",[a("li",[t._v("以太网接口文件ethernetif.c的移植，主要包含"),a("code",[t._v("ethernet_low_level_init")]),t._v("，"),a("code",[t._v("ethernet_low_level_output")]),t._v("，"),a("code",[t._v("ethernetif_input")]),t._v("，"),a("code",[t._v("ethernetif_init")]),t._v("这几个函数的功能\n"),a("ul",[a("li",[a("code",[t._v("ethernetif_input")]),t._v("函数用于从底层物理网卡读取报文，并将该报文向上传递给LwIP协议栈函数ethernet_input进行处理")]),t._v(" "),a("li",[a("code",[t._v("ethernetif_init")]),t._v("函数指定了网络接口netif对应的主机名及网卡描述，并指定了该网卡的MAC地址，同事还指定了netif的发送数据报文函数")])])]),t._v(" "),a("li",[t._v("操作系统模拟层文件sys_arch.c的移植，总的来时操作系统模拟层主要完成了与信号量、消息邮箱机制、线程相关的功能\n"),a("ul",[a("li",[t._v("在sys_arch.h文件中对信号量、邮箱、线程对象进行重定义")]),t._v(" "),a("li",[t._v("sys_mbox_new函数，使用FreeRTOS提供的消息队列机制创建一个空的消息队列")]),t._v(" "),a("li",[t._v("sys_mbox_free函数，删除一个队列，当该队列中还有未被取出的消息时，该函数应当报错，并通知应用程序")]),t._v(" "),a("li",[t._v("sys_mbox_post函数，将消息发送到消息队列中，该函数是一个阻塞函数，当消息被发送至队列后，该函数才会退出阻塞状态")]),t._v(" "),a("li",[t._v("sys_mbox_trypost函数，用于尝试将某个消息发送至消息队列中，当消息被成功投递后，则返回成功，否则返回失败")]),t._v(" "),a("li",[t._v("sys_arch_mbox_fetch函数，用于从消息队列中取出一条消息，该函数是一个阻塞函数，调用该函数的线程若未取到消息，则在形参timeout所指定的时间内，该线程被阻塞。当超过timeout所指定的时间后，该线程恢复至就绪状态。若timeout为0，则调用该函数的线程一直被阻塞，直到收到消息")]),t._v(" "),a("li",[t._v("sys_arch_mbox_tryfetch函数尝试从消息队列中取出消息，它是一个非阻塞函数，当取到消息时，则返回成功，否则立即退出，返回队列空")]),t._v(" "),a("li",[t._v("sys_sem_new函数创建一个信号量，并根据形参的值指定好当前信号量的状态")]),t._v(" "),a("li",[t._v("sys_arch_sem_wait函数在形参timeout指定的时间被阻塞，若timeout为0，则调用该函数的线程将一直被阻塞，直到等待的信号量被释放。但该函数取到信号量时，它将返回取到的该信号量所占的时间")]),t._v(" "),a("li",[t._v("sys_sem_signal函数用于释放一个信号量")]),t._v(" "),a("li",[t._v("sys_sem_free函数用于删除一个信号量")]),t._v(" "),a("li",[t._v("sys_thread_new函数用于创建一个新的线程")]),t._v(" "),a("li",[t._v("sys_init函数是操作系统模拟层的初始化函数，主要对定时器管理数组进行了初始化")]),t._v(" "),a("li",[t._v("sys_zrch_timeouts函数用于返回当前任务的定时器管理链表首地址")]),t._v(" "),a("li",[t._v("sys_arch_protect函数和sys_arch_unprotect函数在访问临界区资源时成对使用")])])]),t._v(" "),a("li",[t._v("ethernet_input函数的实现在独立模式和RTOS模式时是不同的：\n"),a("ul",[a("li",[t._v("在独立应用中，此函数必须被插入到应用的主循环中，以便轮询任何收到的包")]),t._v(" "),a("li",[t._v("在RTOS应用中，此函数为一个阻塞线程，只有当得到所等待的信号量时才处理接收到的数据包。当以太网外设收到数据并产生中断时，会在中断处理函数中释放此信号量")])])])]),t._v(" "),a("h2",{attrs:{id:"lwip配置"}},[a("a",{staticClass:"header-anchor",attrs:{href:"#lwip配置","aria-hidden":"true"}},[t._v("#")]),t._v(" LwIP配置")]),t._v(" "),a("blockquote",[a("p",[t._v("LwIP提供了名为lwipopts.h的文件，它允许用户充分配置栈及其所有模块。用户不需要定义所有LwIP选项：如果未定义某选项，则使用opt.h文件中定义的默认值")])]),t._v(" "),a("ul",[a("li",[t._v("内存配置")])]),t._v(" "),a("p",[a("img",{attrs:{src:"https://s1.ax1x.com/2018/08/10/P6GG5D.png",alt:"LwIP内存配置"}})])])},[],!1,null,null,null);s.default=e.exports}}]);