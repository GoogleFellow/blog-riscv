(window.webpackJsonp=window.webpackJsonp||[]).push([[3],{212:function(t,s,a){t.exports=a.p+"assets/img/knowledge_map.12bc9800.jpg"},213:function(t,s,a){t.exports=a.p+"assets/img/Von_Neumann_architecture.76984515.jpg"},214:function(t,s,a){t.exports=a.p+"assets/img/mips_instruction.b1ade5f8.jpeg"},215:function(t,s,a){t.exports=a.p+"assets/img/cpu_registers.cdba5c17.jpg"},216:function(t,s,a){t.exports=a.p+"assets/img/elf_format.276a740d.jpg"},217:function(t,s,a){t.exports=a.p+"assets/img/linker_process.f62da9b2.jpeg"},218:function(t,s,a){t.exports=a.p+"assets/img/memory_segmentation.57211af3.png"},219:function(t,s,a){t.exports=a.p+"assets/img/memory_paging.0cf2f08e.png"},220:function(t,s,a){t.exports=a.p+"assets/img/dynamic_link.8cab516a.jpeg"},221:function(t,s,a){t.exports=a.p+"assets/img/plt_got_table.1144d3a2.jpg"},222:function(t,s,a){t.exports=a.p+"assets/img/charset_encoding.9911c58d.jpg"},223:function(t,s,a){t.exports=a.p+"assets/img/gate_circuit.94194480.jpg"},224:function(t,s,a){t.exports=a.p+"assets/img/half_adder.5860fd8c.jpg"},225:function(t,s,a){t.exports=a.p+"assets/img/full_adder.3f11f278.jpg"},226:function(t,s,a){t.exports=a.p+"assets/img/8_bit_adder.68cd3891.jpeg"},227:function(t,s,a){t.exports=a.p+"assets/img/sequent_multiply.cb809de1.jpg"},228:function(t,s,a){t.exports=a.p+"assets/img/multiply_example.0615e5e4.jpeg"},229:function(t,s,a){t.exports=a.p+"assets/img/BCD_encoding.f5a0b0f2.jpg"},230:function(t,s,a){t.exports=a.p+"assets/img/ieee_float32.914b71bf.jpg"},231:function(t,s,a){t.exports=a.p+"assets/img/float_example.f9213c43.jpg"},232:function(t,s,a){t.exports=a.p+"assets/img/float_example_result.9ace5a74.jpeg"},233:function(t,s,a){t.exports=a.p+"assets/img/instruction_cycle.bde3548a.jpeg"},234:function(t,s,a){t.exports=a.p+"assets/img/RS_flip_flop.dc6dcce6.jpeg"},235:function(t,s,a){t.exports=a.p+"assets/img/RS_flip_flop_with_clock.9e9bc411.jpeg"},236:function(t,s,a){t.exports=a.p+"assets/img/D_flip_flop.d749acce.jpeg"},237:function(t,s,a){t.exports=a.p+"assets/img/PC_counter.1ed21092.jpg"},238:function(t,s,a){t.exports=a.p+"assets/img/2-1_selector.383bfbb0.jpeg"},239:function(t,s,a){t.exports=a.p+"assets/img/decoder.4002b5f8.jpeg"},240:function(t,s,a){t.exports=a.p+"assets/img/simplest_CPU.6863e10f.jpeg"},241:function(t,s,a){t.exports=a.p+"assets/img/CPU_pipeline.1e880fa8.jpeg"},242:function(t,s,a){t.exports=a.p+"assets/img/CPU_pipeline_overhead.d9e141af.jpeg"},243:function(t,s,a){t.exports=a.p+"assets/img/structure_hazard.c2a4c034.jpeg"},244:function(t,s,a){t.exports=a.p+"assets/img/princeton_harvard.e7508cb4.jpeg"},245:function(t,s,a){t.exports=a.p+"assets/img/pipeline_bubble.0d762f2c.jpeg"},246:function(t,s,a){t.exports=a.p+"assets/img/two_add_instructions.94dda233.jpeg"},247:function(t,s,a){t.exports=a.p+"assets/img/operant_forwarding.dceadd35.jpeg"},248:function(t,s,a){t.exports=a.p+"assets/img/OoOE.153f8d5e.jpeg"},319:function(t,s,a){"use strict";a.r(s);var r=a(2),e=Object(r.a)({},(function(){var t=this,s=t.$createElement,r=t._self._c||s;return r("ContentSlotsDistributor",{attrs:{"slot-key":t.$parent.slotKey}},[r("h1",{attrs:{id:"计算机组成原理"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#计算机组成原理"}},[t._v("#")]),t._v(" 计算机组成原理")]),t._v(" "),r("h2",{attrs:{id:"知识地图"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#知识地图"}},[t._v("#")]),t._v(" 知识地图")]),t._v(" "),r("p",[r("img",{attrs:{src:a(212),alt:"知识图谱"}})]),t._v(" "),r("h2",{attrs:{id:"冯诺依曼体系结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#冯诺依曼体系结构"}},[t._v("#")]),t._v(" 冯诺依曼体系结构")]),t._v(" "),r("p",[r("img",{attrs:{src:a(213),alt:"冯诺依曼体系结构"}})]),t._v(" "),r("h2",{attrs:{id:"提高-cpu-性能的方式"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#提高-cpu-性能的方式"}},[t._v("#")]),t._v(" 提高 CPU 性能的方式")]),t._v(" "),r("ol",[r("li",[t._v("增加 CPU 核心的数量，通过并行计算来提升性能")]),t._v(" "),r("li",[t._v("使用更先进的 CPU 制造工艺")]),t._v(" "),r("li",[t._v("加速大概率事件（比如机器学习中，99% 都是向量和矩阵计算）")]),t._v(" "),r("li",[t._v("通过流水线提高性能，拆分 CPU 指令执行的过程，细化运行")]),t._v(" "),r("li",[t._v("通过预测提高性能")])]),t._v(" "),r("h2",{attrs:{id:"mips-指令"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#mips-指令"}},[t._v("#")]),t._v(" MIPS 指令")]),t._v(" "),r("p",[r("img",{attrs:{src:a(214),alt:"MIPS 指令"}})]),t._v(" "),r("p",[t._v("MIPS 指令是一个 32 位的整数，高 6 位叫操作码，代表这条指令具体是一条什么样的指令。")]),t._v(" "),r("ul",[r("li",[t._v("R 指令一般用来做算数和逻辑操作，里面有读取和写入数据的寄存器的地址。如果是逻辑位移操作，后面还有位移操作的位移量，而最后的功能码，则是在前面的操作码不够的时候，扩展操作码表示对应的具体指令的。")]),t._v(" "),r("li",[t._v("I 指令通常是用在数据传输、条件分支以及在运算的时候使用的并非变量而是常数。这个时候没有了位移量和功能码，也没有了第三个寄存器，而是把这三个部分直接合并成了一个地址值或者一个常数。")]),t._v(" "),r("li",[t._v("J 指令就是一个跳转指令，高 6 位之外的 26 位都是一个跳转后的地址。")])]),t._v(" "),r("h2",{attrs:{id:"cpu-内部寄存器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#cpu-内部寄存器"}},[t._v("#")]),t._v(" CPU 内部寄存器")]),t._v(" "),r("p",[r("img",{attrs:{src:a(215),alt:"CPU 内部寄存器"}})]),t._v(" "),r("ul",[r("li",[t._v("条件码寄存器会记录下当前执行指令的条件判断状态，然后通过跳转指令读取对应的条件码，修改 PC 寄存器内的下一条指令的地址，最终实现 if...else 以及 for/while 这样的程序控制流程。")])]),t._v(" "),r("h2",{attrs:{id:"elf-文件"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#elf-文件"}},[t._v("#")]),t._v(" ELF 文件")]),t._v(" "),r("p",[r("img",{attrs:{src:a(216),alt:"ELF 文件格式"}})]),t._v(" "),r("p",[t._v("链接器会扫描所有输入的目标文件，然后把所有符号表里的信息收集起来，构成一个全局的符号表。然后在根据重定位表，把所有不确定要跳转地址的代码，根据符号表里存储的地址，进行一个修正。最后，把所有目标文件的对应段进行一个合并，变成了最终的可执行文件。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(217),alt:"ELF 文件格式"}})]),t._v(" "),r("p",[t._v("装载器不再需要考虑地址跳转的问题，只需要解析 ELF 文件，把对应的指令和数据，加载到内存里面供 CPU 执行就可以了。")]),t._v(" "),r("p",[t._v("Linux 下可执行文件的格式是 "),r("code",[t._v("ELF")]),t._v("，Windows 下可执行文件的格式是 "),r("code",[t._v("PE")]),t._v("， Linux 下的装载器只能解析 ELF 格式而不能解析 PE 格式。")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("Linux 下著名的开源软件 Wine，就是通过兼容 PE 格式装载器，使得我们能直接在 Linux 下运行 Windows 程序。")]),t._v(" "),r("p",[t._v("Windows 的 WSL 可以解析和加载 ELF 格式的文件。")])]),t._v(" "),r("h2",{attrs:{id:"程序装载"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#程序装载"}},[t._v("#")]),t._v(" 程序装载")]),t._v(" "),r("h3",{attrs:{id:"虚实转换"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#虚实转换"}},[t._v("#")]),t._v(" 虚实转换")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("我们把指令里用到的内存地址叫做"),r("strong",[t._v("虚拟内存地址")]),t._v("，实际在内存硬件里面的空间地址叫做"),r("strong",[t._v("物理内存地址")]),t._v("。")])]),t._v(" "),r("p",[t._v("对于任何一个程序来说，它看到的都是同样的内存地址，我们维护一个虚拟内存到物理内存的映射表，这样实际程序指令执行的时候，会通过虚拟内存地址，找到对应的物理内存地址，然后执行。因为是连续的内存地址空间，所有我们只需要维护映射关系的起始地址和对应的空间大小就可以了。")]),t._v(" "),r("h3",{attrs:{id:"内存分段-页"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#内存分段-页"}},[t._v("#")]),t._v(" 内存分段/页")]),t._v(" "),r("p",[r("img",{attrs:{src:a(218),alt:"内存分段"}})]),t._v(" "),r("p",[t._v("如上图所示，内存分段会带来内存碎片的问题，解决办法是"),r("strong",[t._v("内存交换")]),t._v("。")]),t._v(" "),r("p",[t._v("硬盘的访问速度要比内存慢很多，如果内存交换的时候，交换的是一个很占内存空间的程序，这样整个机器都会显得卡顿。解决的办法是"),r("strong",[t._v("内存分页")]),t._v("，在需要进行内存交换的时候，让需要交换写入或者从磁盘装载的数据更少一点。")]),t._v(" "),r("p",[t._v("分段是将一整段连续连续的空间映射给程序，分页是把整个物理内存空间切成一段段固定尺寸的大小。对应的应用程序所需要占用的虚拟内存空间，也会同样切成一段段固定尺寸的大小。这样一个连续并且尺寸固定的内存空间称为"),r("strong",[t._v("页")]),t._v("。从虚拟内存到物理内存的映射，不再是拿整段连续内存的物理地址，而是按照一个一个页来的。在 Linux 下，我们通常只设置成 4KB。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(219),alt:"内存分页"}})]),t._v(" "),r("p",[t._v("由于内存空间都是预先划分好的，也就没有了不能使用的碎片，而只有被释放出来的很多 4KB 的页。即使内存空间不够，需要让现有的、正在运行的其它程序通过内存交换释放出一些内存页来，一次性写入磁盘的也只有少数的一个页或者几个页。")]),t._v(" "),r("p",[t._v("更进一步，分页的方式使得我们在装载程序的时候，不再需要一次性把程序加载到物理内存中。我们完全可以在进行虚拟内存和物理内存的页之间的映射之后，并不真的把页加载到物理内存里，而是只在程序运行中，需要用到对应虚拟内存页里面的指令和数据时，再加载到物理内存里面去。")]),t._v(" "),r("h2",{attrs:{id:"动态链接"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#动态链接"}},[t._v("#")]),t._v(" 动态链接")]),t._v(" "),r("p",[r("img",{attrs:{src:a(220),alt:"动态链接"}})]),t._v(" "),r("p",[t._v("想要在程序运行的时候共享代码，有一定的要求，就是这些机器码必须是"),r("strong",[t._v("地址无关")]),t._v("的，即编译出来的共享库文件的指令代码是地址无关码。常见的地址相关的代码：")]),t._v(" "),r("ul",[r("li",[t._v("绝对地址代码")]),t._v(" "),r("li",[t._v("利用重定位表的代码")])]),t._v(" "),r("h3",{attrs:{id:"plt-procedure-link-table-和-got-global-offset-table"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#plt-procedure-link-table-和-got-global-offset-table"}},[t._v("#")]),t._v(" PLT(Procedure Link Table) 和 GOT(Global Offset Table)")]),t._v(" "),r("p",[r("img",{attrs:{src:a(221),alt:"PLT和GOT"}})]),t._v(" "),r("p",[t._v("在动态链接对应的共享库时，我们在共享库的 data section 里面，保存了一张 GOT 表，GOT 表在内存里和对应的代码段之间的偏移量始终是确定的。"),r("strong",[t._v("虽然共享库的代码部分的物理内存是共享的，但是数据部分是各个动态链接它的应用程序里面各加载一份的")]),t._v("。GOT 表里的数据，是在我们加载一个个共享库的时候写进去的。"),r("strong",[t._v("不同的进程，调用同样的 lib.so，各自 GOT 里面指向最终加载的动态链接库里面的虚拟内存地址是不同的")]),t._v("。这有点像 C 语言里用函数指针来调用对应的函数，并不是通过预先已经确定好的函数名来调用，而是利用当时它在内存里面的动态地址来调用。")]),t._v(" "),r("h2",{attrs:{id:"二进制编码"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#二进制编码"}},[t._v("#")]),t._v(" 二进制编码")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("原码和补码的区别：")]),t._v(" "),r("p",[t._v("原码使用最高位来表示符号，且最高位不参与数值运算；")]),t._v(" "),r("p",[t._v("补码也使用最高位表示符号，但是最高位也会参与数值运算。")])]),t._v(" "),r("p",[t._v("用补码表示负数，使得整数相加变得更加容易，不需要特殊处理，也意味着它们是同样的电路。")]),t._v(" "),r("h2",{attrs:{id:"unicode-和-utf-8"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#unicode-和-utf-8"}},[t._v("#")]),t._v(" Unicode 和 UTF-8")]),t._v(" "),r("p",[t._v("Unicode 是一个字符集(Charset)，包含了 150 种语言的 14 万个不同的字符。")]),t._v(" "),r("p",[t._v("UTF-8 是一种字符编码(Character Encoding)，主要解决如何使用二进制来表示字符集里的字符。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(222),alt:"字符集和字符编码"}})]),t._v(" "),r("p",[t._v("如果某些字符在 Unicode 中并不存在，那么 Unicode 会统一把这些字符记录为 U+FFFD 这个编码，如果使用 UTF-8 的格式存储下来，就是 \\xef\\xbf\\xbd。如果连续两个这样的字符放在一起，\\xef\\xbf\\xbd\\xef\\xbf\\xbd，这时如果用 GB2312 的方式进行 decode，就会变成“锟斤拷”。")]),t._v(" "),r("h2",{attrs:{id:"加法器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#加法器"}},[t._v("#")]),t._v(" 加法器")]),t._v(" "),r("p",[r("img",{attrs:{src:a(223),alt:"门电路符号"}})]),t._v(" "),r("h3",{attrs:{id:"半加器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#半加器"}},[t._v("#")]),t._v(" 半加器")]),t._v(" "),r("p",[r("img",{attrs:{src:a(224),alt:"半加器"}})]),t._v(" "),r("h3",{attrs:{id:"全加器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#全加器"}},[t._v("#")]),t._v(" 全加器")]),t._v(" "),r("p",[r("img",{attrs:{src:a(225),alt:"全加器"}})]),t._v(" "),r("h3",{attrs:{id:"_8-位加法器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_8-位加法器"}},[t._v("#")]),t._v(" 8 位加法器")]),t._v(" "),r("p",[r("img",{attrs:{src:a(226),alt:"8比特加法器"}})]),t._v(" "),r("h2",{attrs:{id:"乘法器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#乘法器"}},[t._v("#")]),t._v(" 乘法器")]),t._v(" "),r("p",[r("img",{attrs:{src:a(227),alt:"乘法器硬件结构"}})]),t._v(" "),r("p",[t._v("先拿乘数最右侧的个位乘以被乘数，把结果写入用来存放计算结果的开关里面，然后乘数左移一位，乘数右移一位，仍然用乘数去乘以被乘数，把结果加到刚才的结果上。反复重复这一步骤，直到不能再左移和右移位置。这样仅仅需要简单的加法器、一个左移一位的电路和右移一位的电路，就能完成整个乘法。")]),t._v(" "),r("p",[t._v("这种乘法器中的每一组加法都要依赖上一组加法后的结果，整个算法是"),r("strong",[t._v("顺序")]),t._v("的。")]),t._v(" "),r("h4",{attrs:{id:"示例-13x9-（二进制-1101-x-1001）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#示例-13x9-（二进制-1101-x-1001）"}},[t._v("#")]),t._v(" 示例 13x9 （二进制 1101 x 1001）")]),t._v(" "),r("p",[r("img",{attrs:{src:a(228),alt:"乘法器计算示例"}})]),t._v(" "),r("h2",{attrs:{id:"定点数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#定点数"}},[t._v("#")]),t._v(" 定点数")]),t._v(" "),r("p",[t._v("用 4 个比特来表示 0～9 的整数，那么 32 个比特就可以表示 8 个这样的整数。然后我们把最右边的 2 个 0～9 的整数当成小数部分；把左边 6 个 0～9 的整数当成整数部分，这样我们就可以用 32 个比特来表示从0～999999.99 这样 1 亿个实数。")]),t._v(" "),r("p",[t._v("这种用二进制来表示十进制的编码方式叫作"),r("strong",[t._v("BCD编码")]),t._v("，常用在超市、银行这样需要小数记录金额的情况里。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(229),alt:"BCD 编码"}})]),t._v(" "),r("div",{staticClass:"custom-block warning"},[r("p",{staticClass:"custom-block-title"},[t._v("WARNING")]),t._v(" "),r("p",[t._v("定点数的表示方式有几个缺点：")]),t._v(" "),r("ol",[r("li",[t._v("表示方式有点“浪费”")]),t._v(" "),r("li",[t._v("没有办法同时表示很大的数字和很小的数字")])])]),t._v(" "),r("h2",{attrs:{id:"浮点数"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浮点数"}},[t._v("#")]),t._v(" 浮点数")]),t._v(" "),r("p",[t._v("计算机使用科学计数法来表示实数，浮点数的科学计数法表示有一个 IEEE 标准，它定义了两个基本的格式，一个是用 32 比特表示单精度的浮点数，另外一个是用 64 比特表示双精度的浮点数。")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("在浮点数里，我们不像整数分符号数和无符号数，所有额浮点数都是有符号的。")])]),t._v(" "),r("p",[r("img",{attrs:{src:a(230),alt:"IEEE float格式"}})]),t._v(" "),r("p",[t._v("浮点数可以表示成这样："),r("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[r("mjx-math",{staticClass:" MJX-TEX"},[r("mjx-mo",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"("}})],1),r("mjx-mo",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"2212"}})],1),r("mjx-mn",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"1"}})],1),r("mjx-msup",[r("mjx-mo",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:")"}})],1),r("mjx-script",{staticStyle:{"vertical-align":"0.363em"}},[r("mjx-mi",{staticClass:"mjx-i",attrs:{size:"s"}},[r("mjx-c",{attrs:{c:"s"}})],1)],1)],1),r("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[r("mjx-c",{attrs:{c:"D7"}})],1),r("mjx-mn",{staticClass:"mjx-n",attrs:{space:"3"}},[r("mjx-c",{attrs:{c:"1"}}),r("mjx-c",{attrs:{c:"."}})],1),r("mjx-mi",{staticClass:"mjx-i"},[r("mjx-c",{attrs:{c:"f"}})],1),r("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[r("mjx-c",{attrs:{c:"D7"}})],1),r("mjx-msup",[r("mjx-mn",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"2"}})],1),r("mjx-script",{staticStyle:{"vertical-align":"0.363em"}},[r("mjx-mi",{staticClass:"mjx-i",attrs:{size:"s"}},[r("mjx-c",{attrs:{c:"e"}})],1)],1)],1)],1)],1)],1),t._v(" "),r("p",[r("code",[t._v("指数位 e")]),t._v("：8 个比特能够表示的整数空间是 0~255，IEEE 规定使用 "),r("strong",[t._v("1~254")]),t._v(" 映射到 "),r("strong",[t._v("-126~127")]),t._v(" 这 254 个有正有负的数上。因为浮点数不仅要表示很大的数，也要表示很小的数，所以指数位也会有负数。指数位的其他取值见下表：")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("e")]),t._v(" "),r("th",[t._v("f")]),t._v(" "),r("th",[t._v("s")]),t._v(" "),r("th",[t._v("浮点数")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("0")]),t._v(" "),r("td",[t._v("0")]),t._v(" "),r("td",[t._v("0 or 1")]),t._v(" "),r("td",[t._v("0")])]),t._v(" "),r("tr",[r("td",[t._v("0")]),t._v(" "),r("td",[t._v("!=0")]),t._v(" "),r("td",[t._v("0 or 1")]),t._v(" "),r("td",[t._v("0.f")])]),t._v(" "),r("tr",[r("td",[t._v("255")]),t._v(" "),r("td",[t._v("0")]),t._v(" "),r("td",[t._v("0")]),t._v(" "),r("td",[t._v("无穷大")])]),t._v(" "),r("tr",[r("td",[t._v("255")]),t._v(" "),r("td",[t._v("0")]),t._v(" "),r("td",[t._v("1")]),t._v(" "),r("td",[t._v("无穷小")])]),t._v(" "),r("tr",[r("td",[t._v("255")]),t._v(" "),r("td",[t._v("!=0")]),t._v(" "),r("td",[t._v("0 or 1")]),t._v(" "),r("td",[t._v("NAN")])])])]),t._v(" "),r("h3",{attrs:{id:"示例：浮点数的二进制转化（以-9-1-为例）"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#示例：浮点数的二进制转化（以-9-1-为例）"}},[t._v("#")]),t._v(" 示例：浮点数的二进制转化（以 9.1 为例）")]),t._v(" "),r("ol",[r("li",[r("p",[t._v("整数部分转化为二进制：1001")])]),t._v(" "),r("li",[r("p",[t._v("小数部分转化为二进制：")]),t._v(" "),r("p",[r("img",{attrs:{src:a(231),alt:"小数部分的二进制表示"}})])]),t._v(" "),r("li",[r("p",[t._v("整数和小数部分拼在一起，"),r("code",[t._v("1001.000110011...")])])]),t._v(" "),r("li",[r("p",[t._v("科学计数法表示："),r("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[r("mjx-math",{staticClass:" MJX-TEX"},[r("mjx-mn",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"1"}}),r("mjx-c",{attrs:{c:"."}}),r("mjx-c",{attrs:{c:"0"}}),r("mjx-c",{attrs:{c:"0"}}),r("mjx-c",{attrs:{c:"1"}}),r("mjx-c",{attrs:{c:"0"}})],1)],1)],1),r("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[r("mjx-math",{staticClass:" MJX-TEX"},[r("mjx-mn",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"0"}}),r("mjx-c",{attrs:{c:"0"}}),r("mjx-c",{attrs:{c:"1"}}),r("mjx-c",{attrs:{c:"1"}})],1)],1)],1),r("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[r("mjx-math",{staticClass:" MJX-TEX"},[r("mjx-mn",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"0"}}),r("mjx-c",{attrs:{c:"0"}}),r("mjx-c",{attrs:{c:"1"}}),r("mjx-c",{attrs:{c:"1"}})],1),r("mjx-mo",{staticClass:"mjx-n",attrs:{space:"2"}},[r("mjx-c",{attrs:{c:"2026"}})],1),r("mjx-mo",{staticClass:"mjx-n",attrs:{space:"3"}},[r("mjx-c",{attrs:{c:"D7"}})],1),r("mjx-msup",[r("mjx-mn",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"2"}})],1),r("mjx-script",{staticStyle:{"vertical-align":"0.363em"}},[r("mjx-mn",{staticClass:"mjx-n",attrs:{size:"s"}},[r("mjx-c",{attrs:{c:"3"}})],1)],1)],1)],1)],1)],1)]),t._v(" "),r("li",[r("p",[t._v("符号位 s=0；有效位f=001000110011...，因为 f 最长只有 23 位，于是 f=00100011001100110011001；指数应该是 3, 但是因为指数有正有负，指数位在 127 之前代表负数，之后代表正数，那 3 对应就是 130,转化成二进制就是 e=10000010")]),t._v(" "),r("p",[r("img",{attrs:{src:a(232),alt:"9.1 的二进制表示结果"}})])])]),t._v(" "),r("h3",{attrs:{id:"浮点数的加法和精度损失"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#浮点数的加法和精度损失"}},[t._v("#")]),t._v(" 浮点数的加法和精度损失")]),t._v(" "),r("p",[t._v("浮点数加法原则："),r("strong",[t._v("先对齐、再计算")])]),t._v(" "),r("p",[t._v("指数位较小的数，需要将有效位右移，在右移的过程中，最右侧的有效位就被丢弃掉了，这会导致指数位较小的数，在加法发生之前就丢失精度。两个相加数的指数位差的越大，位移的位数越大，可能丢失的精度也就越大。")]),t._v(" "),r("p",[t._v("32位浮点数的有效长度一共只有23位，如果两个数的指数位相差23位，较小的数右移24位之后，所有的有效位就都丢失了。")]),t._v(" "),r("div",{staticClass:"language-java line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("FloatPrecision")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" sum "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0f")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("20000000")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" x "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0f")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \tsum "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+=")]),t._v(" x"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \t\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sum is "')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sum"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br")])]),r("p",[t._v("对应的输出结果是："),r("code",[t._v("sum is 1.6777216E7")]),t._v("，因为加到1600万之后的加法因为精度丢失都没有了。")]),t._v(" "),r("p",[t._v("解决办法是，在每次的计算过程中，都用一次减法，把当前加法计算中损失的精度记录下来，然后在后面的循环中，把这个精度损失放在要加的小数上，再做一次运算。")]),t._v(" "),r("div",{staticClass:"language-java line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-java"}},[r("code",[r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("class")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("KahanSummation")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n  "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("public")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("static")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("void")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("main")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("String")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("[")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("]")]),t._v(" args"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" sum "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0f")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" c "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0.0f")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("for")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("int")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("0")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("<")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("20000000")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v(" i"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("++")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("{")]),t._v("\n    \t"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" x "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token number"}},[t._v("1.0f")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" y "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" x "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v(" c"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \t"),r("span",{pre:!0,attrs:{class:"token keyword"}},[t._v("float")]),t._v(" t "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" sum "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" y"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \tc "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),t._v("t"),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("sum"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("-")]),t._v("y"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("\n    \tsum "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("=")]),t._v(" t"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("    \t\n    "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n    "),r("span",{pre:!0,attrs:{class:"token class-name"}},[t._v("System")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),t._v("out"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(".")]),r("span",{pre:!0,attrs:{class:"token function"}},[t._v("println")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("(")]),r("span",{pre:!0,attrs:{class:"token string"}},[t._v('"sum is "')]),t._v(" "),r("span",{pre:!0,attrs:{class:"token operator"}},[t._v("+")]),t._v(" sum"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(")")]),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v(";")]),t._v("   \n  "),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\t\n"),r("span",{pre:!0,attrs:{class:"token punctuation"}},[t._v("}")]),t._v("\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br"),r("span",{staticClass:"line-number"},[t._v("3")]),r("br"),r("span",{staticClass:"line-number"},[t._v("4")]),r("br"),r("span",{staticClass:"line-number"},[t._v("5")]),r("br"),r("span",{staticClass:"line-number"},[t._v("6")]),r("br"),r("span",{staticClass:"line-number"},[t._v("7")]),r("br"),r("span",{staticClass:"line-number"},[t._v("8")]),r("br"),r("span",{staticClass:"line-number"},[t._v("9")]),r("br"),r("span",{staticClass:"line-number"},[t._v("10")]),r("br"),r("span",{staticClass:"line-number"},[t._v("11")]),r("br"),r("span",{staticClass:"line-number"},[t._v("12")]),r("br"),r("span",{staticClass:"line-number"},[t._v("13")]),r("br"),r("span",{staticClass:"line-number"},[t._v("14")]),r("br")])]),r("h2",{attrs:{id:"指令-运算-cpu"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#指令-运算-cpu"}},[t._v("#")]),t._v(" 指令+运算=CPU")]),t._v(" "),r("h3",{attrs:{id:"指令周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#指令周期"}},[t._v("#")]),t._v(" 指令周期")]),t._v(" "),r("p",[t._v("计算机每执行一条指令的过程可以分解成如下几个步骤：")]),t._v(" "),r("ol",[r("li",[t._v("Fetch（取得指令）：从 PC 寄存器里找到对应的指令地址，根据指令地址从内存里把具体的指令，加载到指令寄存器中，然后把 PC 寄存器自增。")]),t._v(" "),r("li",[t._v("Decode（指令译码）：根据指令寄存器里面的指令，解析成要进行什么样的操作，具体要操作哪些寄存器、数据或者内存地址。")]),t._v(" "),r("li",[t._v("Execute（执行指令）：进行算数逻辑操作、数据传输或者直接的地址跳转。")])]),t._v(" "),r("p",[t._v("一轮 "),r("strong",[t._v("Fetch - Decode - Execute")]),t._v(" 的时间称为"),r("strong",[t._v("指令周期")]),t._v("。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(233),alt:"指令周期"}})]),t._v(" "),r("h3",{attrs:{id:"机器周期"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#机器周期"}},[t._v("#")]),t._v(" 机器周期")]),t._v(" "),r("p",[t._v("机器周期也叫 CPU 周期，CPU 内粗的操作速度很快，但是访问内存的速度却要慢很多，我们把从内存里面读取一条指令的最短时间称为 CPU 周期。")]),t._v(" "),r("h3",{attrs:{id:"通过-d-触发器实现存储功能"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#通过-d-触发器实现存储功能"}},[t._v("#")]),t._v(" 通过 D 触发器实现存储功能")]),t._v(" "),r("h4",{attrs:{id:"rs-触发器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#rs-触发器"}},[t._v("#")]),t._v(" RS 触发器")]),t._v(" "),r("p",[r("img",{attrs:{src:a(234),alt:"RS触发器"}})]),t._v(" "),r("p",[t._v("真值表：")]),t._v(" "),r("table",[r("thead",[r("tr",[r("th",[t._v("S")]),t._v(" "),r("th",[t._v("R")]),t._v(" "),r("th",[t._v("Q")])])]),t._v(" "),r("tbody",[r("tr",[r("td",[t._v("1")]),t._v(" "),r("td",[t._v("0")]),t._v(" "),r("td",[t._v("1")])]),t._v(" "),r("tr",[r("td",[t._v("0")]),t._v(" "),r("td",[t._v("1")]),t._v(" "),r("td",[t._v("0")])]),t._v(" "),r("tr",[r("td",[t._v("0")]),t._v(" "),r("td",[t._v("0")]),t._v(" "),r("td",[t._v("Q")])]),t._v(" "),r("tr",[r("td",[t._v("1")]),t._v(" "),r("td",[t._v("1")]),t._v(" "),r("td",[t._v("NA")])])])]),t._v(" "),r("p",[t._v("往这个电路里加两个与门和一个时钟信号，就可以实现一个利用时钟信号来操作一个电路了。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(235),alt:"RS触发器"}})]),t._v(" "),r("h4",{attrs:{id:"d-触发器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#d-触发器"}},[t._v("#")]),t._v(" D 触发器")]),t._v(" "),r("p",[t._v("把 R 和 S 两个信号通过一个反相器合并，我们可以通过一个数据信号 D 进行 Q 的写入操作。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(236),alt:"D触发器"}})]),t._v(" "),r("p",[t._v("CPU 里面的寄存器可以直接通过 D 型触发器来构造。")]),t._v(" "),r("h3",{attrs:{id:"自动计数器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#自动计数器"}},[t._v("#")]),t._v(" 自动计数器")]),t._v(" "),r("p",[r("img",{attrs:{src:a(237),alt:"计数器"}})]),t._v(" "),r("p",[t._v("这个自动计数器可以拿来当作 PC 寄存器。")]),t._v(" "),r("p",[t._v("加法计数、内存取值，乃至后面的命令执行，最终其实都是由我们一开始讲的时钟信号来控制执行时间点和先后顺序的，这也是我们需要时序电路最核心的原因。")]),t._v(" "),r("p",[t._v("在最简单的情况下，我们让每一条指令，从程序计数，到获取指令、执行指令，都在一个时钟周期内完成，这样的 CPU 设计称为"),r("strong",[t._v("单指令周期处理器")]),t._v("。")]),t._v(" "),r("h3",{attrs:{id:"_2-1-选择器"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#_2-1-选择器"}},[t._v("#")]),t._v(" 2-1 选择器")]),t._v(" "),r("p",[r("img",{attrs:{src:a(238),alt:"2-1选择器"}})]),t._v(" "),r("p",[t._v("一个反向器只能有0和1两个状态，我们只能从两个地址中选择一个。如果输入的信号有三个不同的开关，我们就能从8个地址中选择一个了，这样的电路，就叫"),r("strong",[t._v("3-8译码器")]),t._v("。现代的计算机，如果 CPU 是 64 位的，就意味着寻址空间是 "),r("mjx-container",{staticClass:"MathJax",attrs:{jax:"CHTML"}},[r("mjx-math",{staticClass:" MJX-TEX"},[r("mjx-msup",[r("mjx-mn",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"2"}})],1),r("mjx-script",{staticStyle:{"vertical-align":"0.363em"}},[r("mjx-TeXAtom",{attrs:{size:"s"}},[r("mjx-mn",{staticClass:"mjx-n"},[r("mjx-c",{attrs:{c:"6"}}),r("mjx-c",{attrs:{c:"4"}})],1)],1)],1)],1)],1)],1),t._v(" ，那么我们就需要一个有 64 个开关的译码器。")],1),t._v(" "),r("p",[t._v("当我们把译码器和内存连到一起时，通常会组成这样一个电路：")]),t._v(" "),r("p",[r("img",{attrs:{src:a(239),alt:"地址译码器"}})]),t._v(" "),r("p",[t._v("译码器的本质就是从输入的多位信号中，根据一定的开关和电路组合，选择出自己想要的信号。除了能够进行“寻址”之外，还可以把对应的需要运行的指令码，同样通过译码器，找出 opcode 以及后面对应的操作数或者寄存器地址。")]),t._v(" "),r("h2",{attrs:{id:"构造一个最简单的-cpu"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#构造一个最简单的-cpu"}},[t._v("#")]),t._v(" 构造一个最简单的 CPU")]),t._v(" "),r("p",[r("img",{attrs:{src:a(240),alt:"建立数据通路"}})]),t._v(" "),r("h2",{attrs:{id:"现代处理器的流水线设计"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#现代处理器的流水线设计"}},[t._v("#")]),t._v(" 现代处理器的流水线设计")]),t._v(" "),r("p",[t._v("单指令周期处理器的时钟频率没法设的太高，因为有些复杂指令没有办法在一个时钟周期内运行完成。那么在下一个时钟周期到来，开始执行下一条指令的时候，前一条指令的执行结果可能还没有写入到寄存器里面，那下一条指令读取的数据就是不准确的，就会出现错误。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(241),alt:"流水线示意图"}})]),t._v(" "),r("p",[t._v("五级流水线就表示我们在同一个时钟周期里面，同时运行五条指令的不同阶段，这个时候虽然执行一条指令的始终周期变成了5,但是我们可以把CPU的主频提的更高了。我们不需要确保最复杂的那条指令在时钟周期里面执行完成，而只要保障一个最复杂的流水线的操作，在一个时钟周期内完成就好了。")]),t._v(" "),r("p",[t._v("每一条指令从开始到结束拿到结果的时间并没有变化（即响应时间没有变化），但是同样时间内，完成的指令数增多了（即吞吐率上升了）。")]),t._v(" "),r("h3",{attrs:{id:"超长流水线的性能瓶颈"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#超长流水线的性能瓶颈"}},[t._v("#")]),t._v(" 超长流水线的性能瓶颈")]),t._v(" "),r("p",[r("img",{attrs:{src:a(242),alt:"流水线性能瓶颈"}})]),t._v(" "),r("p",[t._v("每一级流水线对应的输出都要放到流水线寄存器里面，然后在下一个时钟周期，交给下一个流水线级去处理。随着流水线的不断加深，这些操作操作占整个指令的执行时间的比例就会不断增加。所以一味地增加流水线深度并不能无限地提高性能。")]),t._v(" "),r("h2",{attrs:{id:"冒险-hazard"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#冒险-hazard"}},[t._v("#")]),t._v(" 冒险 (Hazard)")]),t._v(" "),r("h3",{attrs:{id:"结构冒险"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#结构冒险"}},[t._v("#")]),t._v(" 结构冒险")]),t._v(" "),r("p",[r("img",{attrs:{src:a(243),alt:"结构冒险"}})]),t._v(" "),r("p",[t._v("结构冒险，本质上是一个硬件层面的资源竞争问题。上图中，在第 1 条指令执行到 MEM 阶段的时候，流水线里的第 4 条指令，在执行指令 Fetch 的操作。访存和取指令都要进行内存数据的读取，而我们的内存只有一个地址译码器，只能在一个时钟周期里面读取一条数据。")]),t._v(" "),r("h4",{attrs:{id:"哈佛结构"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#哈佛结构"}},[t._v("#")]),t._v(" 哈佛结构")]),t._v(" "),r("p",[t._v("针对结构冒险的解决思路是"),r("strong",[t._v("增加资源")]),t._v("，将内存拆分成两部分（存放指令的程序内存和存放数据的数据内存），各自有独立的地址译码器。这样把内存拆成两个部分的解决方案在计算机体系结构里称为"),r("strong",[t._v("哈佛架构")]),t._v("。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(244),alt:"哈佛结构"}})]),t._v(" "),r("p",[t._v("哈佛结构虽然解决了资源冲突的问题，但是失去了灵活性，我们没有办法根据实际的应用去动态分配内存了。")]),t._v(" "),r("p",[t._v("现代了 CPU 虽然没有在内存层面进行对应的拆分，却在 CPU 内部的高速缓存部分进行了区分，把高速缓存分成了指令缓存和数据缓存。")]),t._v(" "),r("h4",{attrs:{id:"指令对齐"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#指令对齐"}},[t._v("#")]),t._v(" 指令对齐")]),t._v(" "),r("p",[t._v("不同类型的指令在流水线的不同阶段会进行不同的操作，比如 "),r("code",[t._v("LOAD")]),t._v("指令需要从内存里读取数据到寄存器，会经历 5 个完整的流水线。"),r("code",[t._v("STORE")]),t._v("这样从寄存器往内存里写数据的指令，不需要有写回寄存器的操作，也就是没有"),r("code",[t._v("WB")]),t._v("的流水线阶段。至于像"),r("code",[t._v("ADD")]),t._v("和"),r("code",[t._v("SUB")]),t._v("这样的加减法指令，所有的操作都在寄存器完成，所以没有实际的内存访问"),r("code",[t._v("MEM")]),t._v("操作。")]),t._v(" "),r("p",[t._v("有些指令没有对应的流水线阶段，但是我们并不能跳过对应的阶段直接执行下一阶段，不然如果我们先后执行一条"),r("code",[t._v("LOAD")]),t._v(" 指令和一条 "),r("code",[t._v("ADD")]),t._v(" 指令，就会发生 "),r("code",[t._v("LOAD")]),t._v(" 指令的 "),r("code",[t._v("WB")]),t._v(" 阶段和 "),r("code",[t._v("ADD")]),t._v(" 指令的 "),r("code",[t._v("WB")]),t._v(" 阶段，在同一个时钟周期发生。这样，相当于触发了一个结构冒险事件，产生了资源竞争。所以，在实践当中，各个指令不需要的阶段，并不会直接跳过，而是会运行一次 "),r("code",[t._v("NOP")]),t._v(" 操作。")]),t._v(" "),r("h3",{attrs:{id:"数据冒险"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#数据冒险"}},[t._v("#")]),t._v(" 数据冒险")]),t._v(" "),r("p",[t._v("数据冒险是指同时执行的多个指令之间有数据依赖的情况，这些数据依赖，可以分成三大类："),r("strong",[t._v("先写后读")]),t._v("，"),r("strong",[t._v("先读后写")]),t._v("和"),r("strong",[t._v("写后在写")]),t._v("。除了读之后再进行读，对于同一个寄存器或者内存地址的操作，都有着明确强制的顺序要求。")]),t._v(" "),r("p",[t._v("解决数据冒险的一个简单办法就是"),r("strong",[t._v("流水线停顿")]),t._v("，或者叫"),r("strong",[t._v("流水线冒泡")]),t._v("。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(245),alt:"流水线冒泡"}})]),t._v(" "),r("p",[t._v("流水线停顿是以牺牲 CPU 性能为代价的，因为实际上在最差的情况下，流水线架构的 CPU 又会退化成单指令周期的 CPU 了。")]),t._v(" "),r("h4",{attrs:{id:"操作数前推"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#操作数前推"}},[t._v("#")]),t._v(" 操作数前推")]),t._v(" "),r("p",[t._v("假设有两条 "),r("code",[t._v("ADD")]),t._v(" 指令先后发生：")]),t._v(" "),r("div",{staticClass:"language-assembly line-numbers-mode"},[r("pre",{pre:!0,attrs:{class:"language-text"}},[r("code",[t._v("add $t0, $s2,$s1\nadd $s2, $s1,$t0\n")])]),t._v(" "),r("div",{staticClass:"line-numbers-wrapper"},[r("span",{staticClass:"line-number"},[t._v("1")]),r("br"),r("span",{staticClass:"line-number"},[t._v("2")]),r("br")])]),r("p",[t._v("后一条指令依赖寄存器 "),r("code",[t._v("t0")]),t._v(" 里的值，而 "),r("code",[t._v("t0")]),t._v(" 的值又来自前一条指令的计算结果，所以后一条需要等待前一条指令的数据写回阶段完成之后才能执行。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(246),alt:"指令之间的数据依赖"}})]),t._v(" "),r("p",[t._v("我们完全可以在第一条指令的执行阶段完成之后，直接将结果数据传输到下一条指令的 ALU，然后，下一条指令不需要再插入两个 NOP 阶段，就可以继续正常走到执行阶段。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(247),alt:"操作数前推"}})]),t._v(" "),r("h4",{attrs:{id:"乱序执行-out-of-order-execution-oooe"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#乱序执行-out-of-order-execution-oooe"}},[t._v("#")]),t._v(" 乱序执行(Out-of-Order Execution, OoOE)")]),t._v(" "),r("p",[t._v("从软件开发的维度思考，乱序执行好像是在指令的执行阶段，引入了一个“线程池”。")]),t._v(" "),r("p",[r("img",{attrs:{src:a(248),alt:"乱序执行"}})]),t._v(" "),r("ol",[r("li",[t._v("在取指令和指令译码的时候，乱序执行的CPU和其他使用流水线架构的CPU是一样的。它会一级一级顺序地进行取指令和指令译码的工作。")]),t._v(" "),r("li",[t._v("在指令译码完成之后，就不一样了。CPU不会直接进行指令执行，而是进行一次指令分发，把指令发到一个叫作保留站 (Reservation Stations) 的地方。顾名思义，这个保留站，就像一个火车站一样。发送到车站的指令，就像是一列列的火车。")]),t._v(" "),r("li",[t._v("这些指令不会立刻执行，而要等待它们所依赖的数据，传递给它们之后才会执行。这就好像一列列的火车都要等到乘客来齐了才能出发。")]),t._v(" "),r("li",[t._v("一旦指令依赖的数据来齐了，指令就可以交到后面的功能单元 (Function  Unit，FU)，其实就是 ALU，去执行了。我们有很多功能单元可以并行运行，但是不同的功能单元能够支持执行的指令并不相同。就和我们的铁轨一样，有些从上海北上，可以到北京和哈尔滨；有些是南下的，可以到广州和深圳。")]),t._v(" "),r("li",[t._v("指令执行的阶段完成之后，我们并不能立刻把结果写回到寄存器里面去，而是把结果再存放到一个叫作重排序缓冲区 (Re-Order Buffer，ROB) 的地方。")]),t._v(" "),r("li",[t._v("在重排序缓冲区里，我们的 CPU 会按照取指令的顺序，对指令的计算结果重新排序。只有排在前面的指令都已经完成了，才会提交指令，完成整个指令的运算结果。")]),t._v(" "),r("li",[t._v("实际的指令的计算结果数据，并不是直接写到内存或者高速缓存里，而是先写入存储缓冲区 (Store Buffer) 里面，最终才会写入到高速缓存和内存里。")])]),t._v(" "),r("p",[t._v("即便指令的执行过程中是乱序的，我们在最终指令的计算结果写入到寄存器和内存之前，依然会进行一次排序，以确保所有指令在外部看来仍然是有序完成的。")]),t._v(" "),r("div",{staticClass:"custom-block tip"},[r("p",{staticClass:"custom-block-title"},[t._v("TIP")]),t._v(" "),r("p",[t._v("在现代 Intel 的 CPU 的乱序执行的过程中，只有指令的执行阶段是乱序的，后面的内存访问和数据写回阶段都仍然是顺序的。")])]),t._v(" "),r("h3",{attrs:{id:"控制冒险"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#控制冒险"}},[t._v("#")]),t._v(" 控制冒险")]),t._v(" "),r("p",[t._v("在 "),r("code",[t._v("jmp")]),t._v(" 指令发生的时候，CPU 可能会跳转去执行其他指令，紧跟 "),r("code",[t._v("jmp")]),t._v(" 后的那一条指令之否应该顺序加载执行，在流水线厘米那进行取指令的时候，我们没法知道，要等 "),r("code",[t._v("jmp")]),t._v(" 指令执行完成，去更新了 PC 寄存器之后我们才能知道，是否执行下一条指令，还是跳转到另外一个内存地址，去取别的指令。这种为了确保能够取到正确的指令，而不得不进行等待延迟的情况，就是"),r("strong",[t._v("控制冒险")]),t._v("。")]),t._v(" "),r("h4",{attrs:{id:"缩短分支延迟"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#缩短分支延迟"}},[t._v("#")]),t._v(" 缩短分支延迟")]),t._v(" "),r("h4",{attrs:{id:"分支预测"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#分支预测"}},[t._v("#")]),t._v(" 分支预测")]),t._v(" "),r("h2",{attrs:{id:"参考资料"}},[r("a",{staticClass:"header-anchor",attrs:{href:"#参考资料"}},[t._v("#")]),t._v(" 参考资料")]),t._v(" "),r("ul",[r("li",[r("a",{attrs:{href:"https://www.coursera.org/learn/jisuanji-zucheng",target:"_blank",rel:"noopener noreferrer"}},[t._v("coursera 公开课《计算机组成》"),r("OutboundLink")],1)]),t._v(" "),r("li",[r("a",{attrs:{href:"https://www.bilibili.com/video/av24540152/",target:"_blank",rel:"noopener noreferrer"}},[t._v("CSAPP 深入理解计算机系统"),r("OutboundLink")],1)])])])}),[],!1,null,null,null);s.default=e.exports}}]);