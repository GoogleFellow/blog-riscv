(window.webpackJsonp=window.webpackJsonp||[]).push([[19],{628:function(s,t,a){s.exports=a.p+"assets/img/rust_version_edition.4d9eab76.png"},629:function(s,t,a){s.exports=a.p+"assets/img/rust_compile_process.f98a877e.png"},719:function(s,t,a){"use strict";a.r(t);var e=a(34),r=Object(e.a)({},(function(){var s=this,t=s.$createElement,e=s._self._c||t;return e("ContentSlotsDistributor",{attrs:{"slot-key":s.$parent.slotKey}},[e("h1",{attrs:{id:"rust-基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rust-基础"}},[s._v("#")]),s._v(" Rust 基础")]),s._v(" "),e("h2",{attrs:{id:"语言基础"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语言基础"}},[s._v("#")]),s._v(" 语言基础")]),s._v(" "),e("h3",{attrs:{id:"语言版本说明"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#语言版本说明"}},[s._v("#")]),s._v(" 语言版本说明")]),s._v(" "),e("p",[e("img",{attrs:{src:a(628),alt:"Rust语言语义化版本与版次"}})]),s._v(" "),e("div",{staticClass:"language-toml line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-toml"}},[e("code",[e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token table class-name"}},[s._v("package")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token key property"}},[s._v("name")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"learning-rust"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token key property"}},[s._v("version")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"0.1.0"')]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token key property"}},[s._v("authors")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("[")]),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"morris"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("]")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token key property"}},[s._v("edition")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"2018"')]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br")])]),e("h3",{attrs:{id:"编译过程"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译过程"}},[s._v("#")]),s._v(" 编译过程")]),s._v(" "),e("p",[e("img",{attrs:{src:a(629),alt:"Rust 编译过程"}})]),s._v(" "),e("ol",[e("li",[s._v("分词：把词法结构处理成词条流")]),s._v(" "),e("li",[s._v("词条流经过语法解析形成抽象语法树")]),s._v(" "),e("li",[s._v("抽象语法树简化成高级中间语言 (HIR)，编译器对 HIR 进行类型检查、方法查找等工作")]),s._v(" "),e("li",[s._v("HIR 进一步简化形成中级中间语言 (MIR)，编译器对 MIR 进行借用检查、优化等工作，在 MIR 中已经看不到 Rust 各版次的差异了")]),s._v(" "),e("li",[s._v("产生 LLVM 中间语言")]),s._v(" "),e("li",[s._v("LLVM 后端会对 LLVM 中间语言进行优化，最终生成机器代码")])]),s._v(" "),e("h3",{attrs:{id:"词法结构"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#词法结构"}},[s._v("#")]),s._v(" 词法结构")]),s._v(" "),e("h4",{attrs:{id:"关键字"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#关键字"}},[s._v("#")]),s._v(" 关键字")]),s._v(" "),e("ul",[e("li",[s._v("严格关键字 (Strict)，比如 "),e("code",[s._v("as")]),s._v(", "),e("code",[s._v("crate")]),s._v(", "),e("code",[s._v("fn")]),s._v(", "),e("code",[s._v("let")]),s._v(", "),e("code",[s._v("impl")]),s._v(", "),e("code",[s._v("mod")]),s._v(", "),e("code",[s._v("match")]),s._v(", "),e("code",[s._v("move")]),s._v(", "),e("code",[s._v("mut")]),s._v(", "),e("code",[s._v("pub")]),s._v(", "),e("code",[s._v("ref")]),s._v(", "),e("code",[s._v("async")]),s._v(", "),e("code",[s._v("await")]),s._v("等等")]),s._v(" "),e("li",[s._v("保留字 (Reserved)，比如 "),e("code",[s._v("do")]),s._v(", "),e("code",[s._v("final")]),s._v(", "),e("code",[s._v("override")]),s._v(", "),e("code",[s._v("priv")]),s._v(", "),e("code",[s._v("typeof")]),s._v(", "),e("code",[s._v("virtual")]),s._v(", "),e("code",[s._v("yield")]),s._v(", "),e("code",[s._v("abstract")]),s._v(" 等等")]),s._v(" "),e("li",[s._v("弱关键字 (Weak)，比如 "),e("code",[s._v("union")]),s._v(" 只在声明联合体的时候才被当作关键字")])]),s._v(" "),e("h4",{attrs:{id:"标识符"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#标识符"}},[s._v("#")]),s._v(" 标识符")]),s._v(" "),e("p",[s._v("变量名、函数名、类型名、参数名都属于标识符，只能以字母或者下划线开头 （未来可能会支持非 ascii 字符）。")]),s._v(" "),e("h4",{attrs:{id:"注释"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#注释"}},[s._v("#")]),s._v(" 注释")]),s._v(" "),e("ul",[e("li",[s._v("模块级文档注释: "),e("code",[s._v("//!")])]),s._v(" "),e("li",[s._v("语言项（方法、函数）级文档注释: "),e("code",[s._v("///")])])]),s._v(" "),e("h4",{attrs:{id:"空白"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#空白"}},[s._v("#")]),s._v(" 空白")]),s._v(" "),e("p",[s._v("Rust 中的空白字符只用作分隔标记，没有语意")]),s._v(" "),e("h4",{attrs:{id:"词条"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#词条"}},[s._v("#")]),s._v(" 词条")]),s._v(" "),e("p",[s._v("语言项，块，语句，表达式，模式，关键字，标识符，字面量，生命周期，可见性，标点符号，分隔符，词条树，属性")]),s._v(" "),e("h4",{attrs:{id:"路径"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#路径"}},[s._v("#")]),s._v(" 路径")]),s._v(" "),e("p",[s._v("路径分隔符"),e("code",[s._v("::")])]),s._v(" "),e("p",[s._v("范型函数 "),e("em",[s._v("turbofish")]),s._v(" 操作符"),e("code",[s._v("::<>")]),s._v("，给范型函数指定具体的数据类型")]),s._v(" "),e("h3",{attrs:{id:"表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#表达式"}},[s._v("#")]),s._v(" 表达式")]),s._v(" "),e("h4",{attrs:{id:"rust-语法的-骨架"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#rust-语法的-骨架"}},[s._v("#")]),s._v(" Rust 语法的“骨架”")]),s._v(" "),e("ul",[e("li",[s._v("属性，类似于 "),e("code",[s._v("#![...]")])]),s._v(" "),e("li",[s._v("分号 "),e("code",[s._v(";")]),s._v("，行分隔符")]),s._v(" "),e("li",[s._v("花括号"),e("code",[s._v("{...}")]),s._v("，块分隔符")])]),s._v(" "),e("h4",{attrs:{id:"分号表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#分号表达式"}},[s._v("#")]),s._v(" 分号表达式")]),s._v(" "),e("ul",[e("li",[s._v("分号表达式返回值永远是自身的单元类型："),e("code",[s._v("()")])]),s._v(" "),e("li",[s._v("分号表达式只有在块表达式最后一行才会进行求值，其他时候只作为“连接符”存在")])]),s._v(" "),e("h4",{attrs:{id:"块表达式"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#块表达式"}},[s._v("#")]),s._v(" 块表达式")]),s._v(" "),e("p",[s._v("块表达式只对其最后一行表达式进行求值")]),s._v(" "),e("h3",{attrs:{id:"编译期计算"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译期计算"}},[s._v("#")]),s._v(" 编译期计算")]),s._v(" "),e("ol",[e("li",[s._v("过程宏 + Build 脚本 (build.rs)")]),s._v(" "),e("li",[s._v("类似于 Cpp 中 constexpr 的 CTFE 功能")])]),s._v(" "),e("h4",{attrs:{id:"常量上下文"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常量上下文"}},[s._v("#")]),s._v(" 常量上下文")]),s._v(" "),e("p",[e("strong",[s._v("常量上下文是编译器唯一进行编译期求值的地方")])]),s._v(" "),e("ol",[e("li",[s._v("常量值初始化位置")]),s._v(" "),e("li",[s._v("静态数组的长度表达式")]),s._v(" "),e("li",[s._v("重复的长度表达式")]),s._v(" "),e("li",[s._v("静态变量、枚举判别式的初始化位置")])]),s._v(" "),e("p",[e("strong",[s._v("常量传播和编译期计算不同")])]),s._v(" "),e("ol",[e("li",[s._v("常量传播是编译器的一种优化")]),s._v(" "),e("li",[s._v("常量传播并不能改变程序的任何行为，并且对开发者是隐藏的")]),s._v(" "),e("li",[s._v("编译期计算则是编译时执行的代码，必须知道其结果才能继续执行")])]),s._v(" "),e("div",{staticClass:"language-rust line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("X")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("u32")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// CTFE (compile time function evaluation)")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("let")]),s._v(" x"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" uew "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("4")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("+")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token number"}},[s._v("3")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// 不是 CTFE，因为它不在常量上下文，但是可能会被编译器做常量传播优化")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br")])]),e("p",[e("strong",[s._v("常量长下文可接受的常量表达式")])]),s._v(" "),e("ol",[e("li",[s._v("const fn 函数")]),s._v(" "),e("li",[s._v("元组结构体")]),s._v(" "),e("li",[s._v("元组的值")])]),s._v(" "),e("div",{staticClass:"language-rust line-numbers-mode"},[e("pre",{pre:!0,attrs:{class:"language-rust"}},[e("code",[e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// String 是一个在堆上分配内存的智能指针类型，无法在编译期进行计算")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("fn")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function-definition function"}},[s._v("hello")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("->")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("{")]),s._v("\n    "),e("span",{pre:!0,attrs:{class:"token string"}},[s._v('"Hello"')]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(".")]),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("to_string")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("}")]),s._v("\n\n"),e("span",{pre:!0,attrs:{class:"token comment"}},[s._v("// Error")]),s._v("\n"),e("span",{pre:!0,attrs:{class:"token keyword"}},[s._v("const")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("S")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(":")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token class-name"}},[s._v("String")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token operator"}},[s._v("=")]),s._v(" "),e("span",{pre:!0,attrs:{class:"token function"}},[s._v("hello")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v("(")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(")")]),e("span",{pre:!0,attrs:{class:"token punctuation"}},[s._v(";")]),s._v("\n")])]),s._v(" "),e("div",{staticClass:"line-numbers-wrapper"},[e("span",{staticClass:"line-number"},[s._v("1")]),e("br"),e("span",{staticClass:"line-number"},[s._v("2")]),e("br"),e("span",{staticClass:"line-number"},[s._v("3")]),e("br"),e("span",{staticClass:"line-number"},[s._v("4")]),e("br"),e("span",{staticClass:"line-number"},[s._v("5")]),e("br"),e("span",{staticClass:"line-number"},[s._v("6")]),e("br"),e("span",{staticClass:"line-number"},[s._v("7")]),e("br")])]),e("h4",{attrs:{id:"常量安全子类型系统"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#常量安全子类型系统"}},[s._v("#")]),s._v(" 常量安全子类型系统")]),s._v(" "),e("ol",[e("li",[s._v("普通的 fn 关键字定义的函数，是 Safe Rust 主类型系统保证安全。")]),s._v(" "),e("li",[s._v("const fn 定义的函数，是 Safe Rust 主类型系统下有一个专门用于常量计算的子类型系统来保证常量安全")])]),s._v(" "),e("h4",{attrs:{id:"编译期计算是如何实现的"}},[e("a",{staticClass:"header-anchor",attrs:{href:"#编译期计算是如何实现的"}},[s._v("#")]),s._v(" 编译期计算是如何实现的")])])}),[],!1,null,null,null);t.default=r.exports}}]);